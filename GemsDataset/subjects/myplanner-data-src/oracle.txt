gr.uom.csse.ai.myplanner.data.Task	public int[][] getDomainIntervals(Date, TimeZone)
gr.uom.csse.ai.myplanner.data.Domain	public static int[] getIntervalsIndeces(Date, Date, Date, TimeZone)
gr.uom.csse.ai.myplanner.data.Domain	public Object clone()
gr.uom.csse.ai.myplanner.data.TaskManager	public Object clone()
gr.uom.csse.ai.myplanner.data.TaskManager	public gr.uom.csse.ai.myplanner.data.Task[] expandTask(gr.uom.csse.ai.myplanner.data.Task, TimeZone)
gr.uom.csse.ai.myplanner.data.TaskManager	public static gr.uom.csse.ai.myplanner.data.Task[] getPeriodicPartsOf(gr.uom.csse.ai.myplanner.data.Task, gr.uom.csse.ai.myplanner.data.Task[])
gr.uom.csse.ai.myplanner.data.TaskManager	public static gr.uom.csse.ai.myplanner.data.Task[] filterTasks(gr.uom.csse.ai.myplanner.data.Task[], gr.uom.csse.ai.myplanner.data.TaskManager.Filter)
gr.uom.csse.ai.myplanner.data.TaskManager	public static gr.uom.csse.ai.myplanner.data.Task[] filterTasks(gr.uom.csse.ai.myplanner.data.Task[], gr.uom.csse.ai.myplanner.data.TaskManager.Filter)
gr.uom.csse.ai.myplanner.data.TaskManager	public static gr.uom.csse.ai.myplanner.data.Task[] sortTasks(gr.uom.csse.ai.myplanner.data.Task[])
gr.uom.csse.ai.myplanner.data.MyPlannerData	public gr.uom.csse.ai.myplanner.data.BinaryConstraint[] expandConstraints(gr.uom.csse.ai.myplanner.data.Task[], gr.uom.csse.ai.myplanner.data.BinaryConstraint[])
gr.uom.csse.ai.myplanner.data.MyPlannerData	public gr.uom.csse.ai.myplanner.data.BinaryPreference[] expandPreferences(gr.uom.csse.ai.myplanner.data.Task[], gr.uom.csse.ai.myplanner.data.BinaryPreference[])