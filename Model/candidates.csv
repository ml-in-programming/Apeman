NAME_CANDIDATE,NUM_CONDITIONAL,NUM_SWITCH,NUM_TYPE_ACCESS,NUM_INVOCATION,NUM_IF,NUM_ASSIGN,NUM_TYPED_ELEMENTS,NUM_VAR_ACCESS,NUM_FIELD_ACCESS,NUM_LOCAL,NUM_PACKAGE,LOC_CANDIDATE,LOC_RATIO,CON_CONDITIONAL,CON_SWITCH,CON_TYPE_ACCESS,CON_INVOCATION,CON_IF,CON_ASSIGN,CON_TYPED_ELEMENTS,CON_VAR_ACCESS,CON_FIELD_ACCESS,CON_LOCAL,CON_PACKAGE,VAR_ACCESS_COUPLING,VAR_ACCESS_COUPLING_2,VAR_ACCESS_COHESION,VAR_ACCESS_COHESION_2,FIELD_ACCESS_COUPLING,FIELD_ACCESS_COUPLING_2,FIELD_ACCESS_COHESION,FIELD_ACCESS_COHESION_2,INVOCATION_COUPLING,INVOCATION_COHESION,TYPE_ACCESS_COUPLING,TYPE_ACCESS_COUPLING_2,TYPE_ACCESS_COHESION,TYPE_ACCESS_COHESION_2,PACKAGE_COUPLING,PACKAGE_COUPLING_2,PACKAGE_COHESION,PACKAGE_COHESION_2
t = (Template) d;,-1.0,0.0,0.0,1.0,0.0,0.0,1.0,7.0,2.0,0.0,0.0,21.0,1.0,0.058823529411764705,-1.0,0.0,0.0,10.0,20.0,4.0,5.0,194.0,42.0,8.0,6.0,441.0,0.25,0.1,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.046153846153846156,0.046153846153846156,3.0,3.0
"t = (Template) d;
dates = templateDates.get(i);",-1.0,0.0,0.0,1.0,1.0,0.0,2.0,14.0,4.0,1.0,0.0,42.0,2.0,0.11764705882352941,-1.0,0.0,0.0,10.0,19.0,4.0,4.0,187.0,40.0,7.0,6.0,420.0,0.5,0.25,0.5,0.5,0.5,0.0,0.5,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,0.5,0.0,0.09230769230769231,0.09230769230769231,3.0,3.0
"t = (Template) d;
dates = templateDates.get(i);
if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/",-1.0,0.0,0.0,1.0,13.0,2.0,2.0,125.0,26.0,1.0,0.0,252.0,3.0,0.17647058823529413,-1.0,0.0,0.0,10.0,7.0,2.0,4.0,76.0,18.0,7.0,6.0,210.0,0.9166666666666666,0.9,3.6666666666666665,3.0,0.5,0.0,0.3333333333333333,0.0,1.0,1.3333333333333333,-1.0,-1.0,1.0,0.0,0.3333333333333333,0.0,0.5538461538461539,0.5538461538461539,12.0,12.0
dates = templateDates.get(i);,-1.0,0.0,0.0,0.0,1.0,0.0,1.0,7.0,2.0,1.0,0.0,21.0,1.0,0.058823529411764705,-1.0,0.0,0.0,11.0,19.0,4.0,5.0,194.0,42.0,7.0,6.0,441.0,0.5,0.16666666666666666,1.0,1.0,0.5,0.0,1.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.046153846153846156,0.046153846153846156,3.0,3.0
"dates = templateDates.get(i);
if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/",-1.0,0.0,0.0,0.0,13.0,2.0,1.0,118.0,24.0,1.0,0.0,231.0,2.0,0.11764705882352941,-1.0,0.0,0.0,11.0,7.0,2.0,5.0,83.0,20.0,7.0,6.0,231.0,0.9166666666666666,0.8,5.5,4.0,0.5,0.0,0.5,0.0,1.0,2.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.5076923076923077,0.5076923076923077,16.5,16.5
"if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/",-1.0,0.0,0.0,0.0,12.0,2.0,0.0,111.0,22.0,0.0,0.0,210.0,1.0,0.058823529411764705,-1.0,0.0,0.0,11.0,8.0,2.0,6.0,90.0,22.0,8.0,6.0,252.0,0.8333333333333334,0.8,10.0,8.0,0.0,0.0,0.0,0.0,1.0,4.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.46153846153846156,0.46153846153846156,30.0,30.0
m = (ManualAction) d;,-1.0,0.0,0.0,1.0,0.0,0.0,1.0,7.0,2.0,0.0,0.0,21.0,1.0,0.058823529411764705,-1.0,0.0,0.0,10.0,20.0,4.0,5.0,194.0,42.0,8.0,6.0,441.0,0.3333333333333333,0.25,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.046153846153846156,0.046153846153846156,3.0,3.0
"m = (ManualAction) d;
clone.addManualAction((ManualAction) m.clone());",-1.0,0.0,0.0,2.0,2.0,0.0,1.0,19.0,4.0,0.0,0.0,56.0,2.0,0.11764705882352941,-1.0,0.0,0.0,9.0,18.0,4.0,5.0,182.0,40.0,8.0,6.0,406.0,0.6666666666666666,0.25,1.0,0.5,0.0,0.0,0.0,0.0,1.0,0.5,-1.0,-1.0,1.0,1.0,0.5,0.5,0.12307692307692308,0.12307692307692308,4.0,4.0
clone.addManualAction((ManualAction) m.clone());,-1.0,0.0,0.0,1.0,2.0,0.0,0.0,12.0,2.0,0.0,0.0,35.0,1.0,0.058823529411764705,-1.0,0.0,0.0,10.0,18.0,4.0,6.0,189.0,42.0,8.0,6.0,427.0,0.3333333333333333,0.1111111111111111,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.07692307692307693,0.07692307692307693,5.0,5.0
d = actions.get(i);,-1.0,0.0,0.0,0.0,1.0,0.0,1.0,7.0,2.0,1.0,0.0,21.0,1.0,0.058823529411764705,-1.0,0.0,0.0,11.0,19.0,4.0,5.0,194.0,42.0,7.0,6.0,441.0,1.0,0.25,1.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.046153846153846156,0.046153846153846156,3.0,3.0
"d = actions.get(i);
if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }",-1.0,0.0,0.0,3.0,17.0,3.0,4.0,155.0,33.0,3.0,0.0,343.0,7.0,0.4117647058823529,-1.0,0.0,0.0,8.0,3.0,1.0,2.0,46.0,11.0,5.0,6.0,119.0,1.0,1.0,0.2857142857142857,0.14285714285714285,1.0,1.0,0.2857142857142857,0.14285714285714285,1.0,0.14285714285714285,-1.0,-1.0,1.0,1.0,0.14285714285714285,0.14285714285714285,0.7538461538461538,0.7538461538461538,7.0,7.0
"if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }",-1.0,0.0,0.0,3.0,16.0,3.0,3.0,148.0,31.0,2.0,0.0,322.0,6.0,0.35294117647058826,-1.0,0.0,0.0,8.0,4.0,1.0,3.0,53.0,13.0,6.0,6.0,140.0,1.0,0.9166666666666666,0.3333333333333333,1.8333333333333333,1.0,0.0,0.3333333333333333,0.0,1.0,0.16666666666666666,-1.0,-1.0,1.0,1.0,0.16666666666666666,0.16666666666666666,0.7076923076923077,0.7076923076923077,7.666666666666667,7.666666666666667
Domain clone;,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,2.0,1.0,0.0,1.0,7.0,1.0,0.058823529411764705,-1.0,0.0,0.0,10.0,20.0,4.0,6.0,199.0,43.0,8.0,5.0,455.0,0.1111111111111111,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.015384615384615385,0.015384615384615385,1.0,1.0
"Domain clone;
checkConsistency(curInd);",-1.0,0.0,0.0,1.0,1.0,0.0,0.0,7.0,1.0,1.0,1.0,21.0,2.0,0.11764705882352941,-1.0,0.0,0.0,10.0,19.0,4.0,6.0,194.0,43.0,7.0,5.0,441.0,0.5,0.1111111111111111,0.5,0.5,0.5,0.0,0.5,0.0,1.0,0.5,-1.0,-1.0,1.0,0.0,0.5,0.0,0.046153846153846156,0.046153846153846156,1.5,1.5
"Domain clone;
checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));",-1.0,0.0,0.0,1.0,3.0,0.0,1.0,17.0,2.0,3.0,1.0,49.0,3.0,0.17647058823529413,-1.0,0.0,0.0,10.0,17.0,4.0,5.0,184.0,42.0,5.0,5.0,413.0,1.0,1.0,0.3333333333333333,0.3333333333333333,1.0,1.0,0.3333333333333333,0.3333333333333333,1.0,0.3333333333333333,-1.0,-1.0,1.0,0.0,0.3333333333333333,0.0,0.1076923076923077,0.1076923076923077,2.3333333333333335,2.3333333333333335
"Domain clone;
checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;",-1.0,0.0,0.0,2.0,3.0,0.0,1.0,19.0,3.0,3.0,2.0,56.0,4.0,0.23529411764705882,-1.0,0.0,0.0,9.0,17.0,4.0,5.0,182.0,41.0,5.0,4.0,406.0,1.0,1.0,0.25,0.25,1.0,1.0,0.25,0.25,1.0,0.25,-1.0,-1.0,1.0,1.0,0.25,0.25,0.12307692307692308,0.12307692307692308,2.0,2.0
"Domain clone;
checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;",-1.0,0.0,0.0,3.0,3.0,0.0,1.0,21.0,4.0,3.0,3.0,63.0,5.0,0.29411764705882354,-1.0,0.0,0.0,8.0,17.0,4.0,5.0,180.0,40.0,5.0,3.0,399.0,1.0,1.0,0.2,0.2,1.0,1.0,0.2,0.2,1.0,0.2,-1.0,-1.0,1.0,1.0,0.2,0.2,0.13846153846153847,0.13846153846153847,1.8,1.8
"Domain clone;
checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;",-1.0,0.0,0.0,4.0,3.0,0.0,1.0,23.0,5.0,3.0,4.0,70.0,6.0,0.35294117647058826,-1.0,0.0,0.0,7.0,17.0,4.0,5.0,178.0,39.0,5.0,2.0,392.0,1.0,1.0,0.16666666666666666,0.16666666666666666,1.0,1.0,0.16666666666666666,0.16666666666666666,1.0,0.16666666666666666,-1.0,-1.0,1.0,1.0,0.16666666666666666,0.16666666666666666,0.15384615384615385,0.15384615384615385,1.6666666666666667,1.6666666666666667
"Domain clone;
checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;",-1.0,0.0,0.0,6.0,3.0,0.0,1.0,26.0,6.0,3.0,5.0,70.0,7.0,0.4117647058823529,-1.0,0.0,0.0,5.0,17.0,4.0,5.0,175.0,38.0,5.0,1.0,392.0,1.0,1.0,0.14285714285714285,0.14285714285714285,1.0,1.0,0.14285714285714285,0.14285714285714285,1.0,0.14285714285714285,-1.0,-1.0,1.0,1.0,0.14285714285714285,0.14285714285714285,0.15384615384615385,0.15384615384615385,1.4285714285714286,1.4285714285714286
"Domain clone;
checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }",-1.0,0.0,0.0,10.0,20.0,4.0,5.0,192.0,42.0,7.0,6.0,434.0,15.0,0.8823529411764706,-1.0,0.0,0.0,1.0,0.0,0.0,1.0,9.0,2.0,1.0,0.0,28.0,1.0,1.0,0.13333333333333333,0.8,1.0,1.0,0.13333333333333333,0.06666666666666667,1.0,0.06666666666666667,-1.0,-1.0,1.0,1.0,0.06666666666666667,0.06666666666666667,0.9538461538461539,0.9538461538461539,4.133333333333334,4.133333333333334
"Domain clone;
checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;",-1.0,0.0,0.0,10.0,20.0,4.0,6.0,198.0,43.0,8.0,6.0,448.0,16.0,0.9411764705882353,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,3.0,1.0,0.0,0.0,14.0,1.0,1.0,0.125,0.75,1.0,1.0,0.125,0.0625,1.0,0.0625,-1.0,-1.0,1.0,1.0,0.0625,0.0625,0.9846153846153847,0.9846153846153847,4.0,4.0
"Domain clone;
checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;
return clone;",-1.0,0.0,0.0,10.0,20.0,4.0,6.0,200.0,44.0,8.0,6.0,455.0,17.0,1.0,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,7.0,1.0,1.0,0.11764705882352941,0.7058823529411765,1.0,1.0,0.11764705882352941,0.058823529411764705,1.0,0.058823529411764705,-1.0,-1.0,1.0,1.0,0.058823529411764705,0.058823529411764705,1.0,1.0,3.823529411764706,3.823529411764706
checkConsistency(curInd);,-1.0,0.0,0.0,0.0,1.0,0.0,0.0,5.0,0.0,1.0,0.0,14.0,1.0,0.058823529411764705,-1.0,0.0,0.0,11.0,19.0,4.0,6.0,196.0,44.0,7.0,6.0,448.0,0.5,0.0,1.0,0.0,0.5,0.0,1.0,0.0,1.0,1.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.03076923076923077,0.03076923076923077,2.0,2.0
"checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));",-1.0,0.0,0.0,0.0,3.0,0.0,1.0,15.0,1.0,3.0,0.0,42.0,2.0,0.11764705882352941,-1.0,0.0,0.0,11.0,17.0,4.0,5.0,186.0,43.0,5.0,6.0,420.0,1.0,1.0,0.5,0.5,1.0,1.0,0.5,0.5,1.0,0.5,-1.0,-1.0,0.0,0.0,0.0,0.0,0.09230769230769231,0.09230769230769231,3.0,3.0
"checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;",-1.0,0.0,0.0,1.0,3.0,0.0,1.0,17.0,2.0,3.0,1.0,49.0,3.0,0.17647058823529413,-1.0,0.0,0.0,10.0,17.0,4.0,5.0,184.0,42.0,5.0,5.0,413.0,1.0,1.0,0.3333333333333333,0.3333333333333333,1.0,1.0,0.3333333333333333,0.3333333333333333,1.0,0.3333333333333333,-1.0,-1.0,1.0,0.0,0.3333333333333333,0.0,0.1076923076923077,0.1076923076923077,2.3333333333333335,2.3333333333333335
"checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;",-1.0,0.0,0.0,2.0,3.0,0.0,1.0,19.0,3.0,3.0,2.0,56.0,4.0,0.23529411764705882,-1.0,0.0,0.0,9.0,17.0,4.0,5.0,182.0,41.0,5.0,4.0,406.0,1.0,1.0,0.25,0.25,1.0,1.0,0.25,0.25,1.0,0.25,-1.0,-1.0,1.0,1.0,0.25,0.25,0.12307692307692308,0.12307692307692308,2.0,2.0
"checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;",-1.0,0.0,0.0,3.0,3.0,0.0,1.0,21.0,4.0,3.0,3.0,63.0,5.0,0.29411764705882354,-1.0,0.0,0.0,8.0,17.0,4.0,5.0,180.0,40.0,5.0,3.0,399.0,1.0,1.0,0.2,0.2,1.0,1.0,0.2,0.2,1.0,0.2,-1.0,-1.0,1.0,1.0,0.2,0.2,0.13846153846153847,0.13846153846153847,1.8,1.8
"checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;",-1.0,0.0,0.0,5.0,3.0,0.0,1.0,24.0,5.0,3.0,4.0,63.0,6.0,0.35294117647058826,-1.0,0.0,0.0,6.0,17.0,4.0,5.0,177.0,39.0,5.0,2.0,399.0,1.0,1.0,0.16666666666666666,0.16666666666666666,1.0,1.0,0.16666666666666666,0.16666666666666666,1.0,0.16666666666666666,-1.0,-1.0,1.0,1.0,0.16666666666666666,0.16666666666666666,0.13846153846153847,0.13846153846153847,1.5,1.5
"checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }",-1.0,0.0,0.0,9.0,20.0,4.0,5.0,190.0,41.0,7.0,5.0,427.0,14.0,0.8235294117647058,-1.0,0.0,0.0,2.0,0.0,0.0,1.0,11.0,3.0,1.0,1.0,35.0,1.0,1.0,0.14285714285714285,0.8571428571428571,1.0,1.0,0.14285714285714285,0.07142857142857142,1.0,0.07142857142857142,-1.0,-1.0,1.0,1.0,0.07142857142857142,0.07142857142857142,0.9384615384615385,0.9384615384615385,4.357142857142857,4.357142857142857
"checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;",-1.0,0.0,0.0,9.0,20.0,4.0,6.0,196.0,42.0,8.0,5.0,441.0,15.0,0.8823529411764706,-1.0,0.0,0.0,2.0,0.0,0.0,0.0,5.0,2.0,0.0,1.0,21.0,1.0,1.0,0.13333333333333333,0.8,1.0,1.0,0.13333333333333333,0.06666666666666667,1.0,0.06666666666666667,-1.0,-1.0,1.0,1.0,0.06666666666666667,0.06666666666666667,0.9692307692307692,0.9692307692307692,4.2,4.2
"checkConsistency(curInd);
clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;
return clone;",-1.0,0.0,0.0,9.0,20.0,4.0,6.0,198.0,43.0,8.0,5.0,448.0,16.0,0.9411764705882353,-1.0,0.0,0.0,2.0,0.0,0.0,0.0,3.0,1.0,0.0,1.0,14.0,1.0,1.0,0.125,0.75,1.0,1.0,0.125,0.0625,1.0,0.0625,-1.0,-1.0,1.0,1.0,0.0625,0.0625,0.9846153846153847,0.9846153846153847,4.0,4.0
"clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));",-1.0,0.0,0.0,0.0,2.0,0.0,1.0,10.0,1.0,2.0,0.0,28.0,1.0,0.058823529411764705,-1.0,0.0,0.0,11.0,18.0,4.0,5.0,191.0,43.0,6.0,6.0,434.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.06153846153846154,0.06153846153846154,4.0,4.0
"clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;",-1.0,0.0,0.0,1.0,2.0,0.0,1.0,12.0,2.0,2.0,1.0,35.0,2.0,0.11764705882352941,-1.0,0.0,0.0,10.0,18.0,4.0,5.0,189.0,42.0,6.0,5.0,427.0,1.0,1.0,0.5,0.5,1.0,1.0,0.5,0.5,0.0,0.0,-1.0,-1.0,1.0,0.0,0.5,0.0,0.07692307692307693,0.07692307692307693,2.5,2.5
"clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;",-1.0,0.0,0.0,2.0,2.0,0.0,1.0,14.0,3.0,2.0,2.0,42.0,3.0,0.17647058823529413,-1.0,0.0,0.0,9.0,18.0,4.0,5.0,187.0,41.0,6.0,4.0,420.0,1.0,1.0,0.3333333333333333,0.3333333333333333,1.0,1.0,0.3333333333333333,0.3333333333333333,0.0,0.0,-1.0,-1.0,1.0,1.0,0.3333333333333333,0.3333333333333333,0.09230769230769231,0.09230769230769231,2.0,2.0
"clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;",-1.0,0.0,0.0,3.0,2.0,0.0,1.0,16.0,4.0,2.0,3.0,49.0,4.0,0.23529411764705882,-1.0,0.0,0.0,8.0,18.0,4.0,5.0,185.0,40.0,6.0,3.0,413.0,1.0,1.0,0.25,0.25,1.0,1.0,0.25,0.25,0.0,0.0,-1.0,-1.0,1.0,1.0,0.25,0.25,0.1076923076923077,0.1076923076923077,1.75,1.75
"clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;",-1.0,0.0,0.0,5.0,2.0,0.0,1.0,19.0,5.0,2.0,4.0,49.0,5.0,0.29411764705882354,-1.0,0.0,0.0,6.0,18.0,4.0,5.0,182.0,39.0,6.0,2.0,413.0,1.0,1.0,0.2,0.2,1.0,1.0,0.2,0.2,0.0,0.0,-1.0,-1.0,1.0,1.0,0.2,0.2,0.1076923076923077,0.1076923076923077,1.4,1.4
"clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }",-1.0,0.0,0.0,9.0,19.0,4.0,5.0,185.0,41.0,6.0,5.0,413.0,13.0,0.7647058823529411,-1.0,0.0,0.0,2.0,1.0,0.0,1.0,16.0,3.0,2.0,1.0,49.0,1.0,1.0,0.9230769230769231,0.07692307692307693,1.0,1.0,0.07692307692307693,0.15384615384615385,1.0,0.07692307692307693,-1.0,-1.0,1.0,1.0,0.07692307692307693,0.07692307692307693,0.9076923076923077,0.9076923076923077,4.538461538461538,4.538461538461538
"clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;",-1.0,0.0,0.0,9.0,19.0,4.0,6.0,191.0,42.0,7.0,5.0,427.0,14.0,0.8235294117647058,-1.0,0.0,0.0,2.0,1.0,0.0,0.0,10.0,2.0,1.0,1.0,35.0,1.0,1.0,0.8571428571428571,0.07142857142857142,1.0,1.0,0.07142857142857142,0.07142857142857142,1.0,0.07142857142857142,-1.0,-1.0,1.0,1.0,0.07142857142857142,0.07142857142857142,0.9384615384615385,0.9384615384615385,4.357142857142857,4.357142857142857
"clone = new Domain(new Date(release.getTime()), new Date(deadline.getTime()));
DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;
return clone;",-1.0,0.0,0.0,9.0,19.0,4.0,6.0,193.0,43.0,7.0,5.0,434.0,15.0,0.8823529411764706,-1.0,0.0,0.0,2.0,1.0,0.0,0.0,8.0,1.0,1.0,1.0,28.0,1.0,1.0,0.8,0.06666666666666667,1.0,1.0,0.06666666666666667,0.06666666666666667,1.0,0.06666666666666667,-1.0,-1.0,1.0,1.0,0.06666666666666667,0.06666666666666667,0.9538461538461539,0.9538461538461539,4.133333333333334,4.133333333333334
DomainAction d;,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,2.0,1.0,0.0,1.0,7.0,1.0,0.058823529411764705,-1.0,0.0,0.0,10.0,20.0,4.0,6.0,199.0,43.0,8.0,5.0,455.0,0.25,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.015384615384615385,0.015384615384615385,1.0,1.0
"DomainAction d;
ManualAction m;",-1.0,0.0,0.0,2.0,0.0,0.0,0.0,4.0,2.0,0.0,2.0,14.0,2.0,0.11764705882352941,-1.0,0.0,0.0,9.0,20.0,4.0,6.0,197.0,42.0,8.0,4.0,448.0,0.3333333333333333,0.25,0.5,0.5,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.5,0.5,0.03076923076923077,0.03076923076923077,1.0,1.0
"DomainAction d;
ManualAction m;
Template t;",-1.0,0.0,0.0,3.0,0.0,0.0,0.0,6.0,3.0,0.0,3.0,21.0,3.0,0.17647058823529413,-1.0,0.0,0.0,8.0,20.0,4.0,6.0,195.0,41.0,8.0,3.0,441.0,0.3333333333333333,0.25,0.3333333333333333,0.3333333333333333,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.3333333333333333,0.3333333333333333,0.046153846153846156,0.046153846153846156,1.0,1.0
"DomainAction d;
ManualAction m;
Template t;
Date[] dates;",-1.0,0.0,0.0,5.0,0.0,0.0,0.0,9.0,4.0,0.0,4.0,21.0,4.0,0.23529411764705882,-1.0,0.0,0.0,6.0,20.0,4.0,6.0,192.0,40.0,8.0,2.0,441.0,0.3333333333333333,0.25,0.25,0.25,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.25,0.25,0.046153846153846156,0.046153846153846156,0.75,0.75
"DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }",-1.0,0.0,0.0,9.0,17.0,4.0,4.0,175.0,40.0,4.0,5.0,385.0,12.0,0.7058823529411765,-1.0,0.0,0.0,2.0,3.0,0.0,2.0,26.0,4.0,4.0,1.0,77.0,1.0,1.0,1.0,0.8333333333333334,1.0,1.0,0.16666666666666666,0.08333333333333333,1.0,0.08333333333333333,-1.0,-1.0,1.0,1.0,0.08333333333333333,0.08333333333333333,0.8461538461538461,0.8461538461538461,4.583333333333333,4.583333333333333
"DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;",-1.0,0.0,0.0,9.0,17.0,4.0,5.0,181.0,41.0,5.0,5.0,399.0,13.0,0.7647058823529411,-1.0,0.0,0.0,2.0,3.0,0.0,1.0,20.0,3.0,3.0,1.0,63.0,1.0,1.0,0.9230769230769231,0.07692307692307693,1.0,1.0,0.07692307692307693,0.15384615384615385,1.0,0.07692307692307693,-1.0,-1.0,1.0,1.0,0.07692307692307693,0.07692307692307693,0.8769230769230769,0.8769230769230769,4.384615384615385,4.384615384615385
"DomainAction d;
ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;
return clone;",-1.0,0.0,0.0,9.0,17.0,4.0,5.0,183.0,42.0,5.0,5.0,406.0,14.0,0.8235294117647058,-1.0,0.0,0.0,2.0,3.0,0.0,1.0,18.0,2.0,3.0,1.0,56.0,1.0,1.0,0.8571428571428571,0.07142857142857142,1.0,1.0,0.07142857142857142,0.14285714285714285,1.0,0.07142857142857142,-1.0,-1.0,1.0,1.0,0.07142857142857142,0.07142857142857142,0.8923076923076924,0.8923076923076924,4.142857142857143,4.142857142857143
ManualAction m;,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,2.0,1.0,0.0,1.0,7.0,1.0,0.058823529411764705,-1.0,0.0,0.0,10.0,20.0,4.0,6.0,199.0,43.0,8.0,5.0,455.0,0.3333333333333333,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.015384615384615385,0.015384615384615385,1.0,1.0
"ManualAction m;
Template t;",-1.0,0.0,0.0,2.0,0.0,0.0,0.0,4.0,2.0,0.0,2.0,14.0,2.0,0.11764705882352941,-1.0,0.0,0.0,9.0,20.0,4.0,6.0,197.0,42.0,8.0,4.0,448.0,0.3333333333333333,0.1,0.5,0.5,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.5,0.5,0.03076923076923077,0.03076923076923077,1.0,1.0
"ManualAction m;
Template t;
Date[] dates;",-1.0,0.0,0.0,4.0,0.0,0.0,0.0,7.0,3.0,0.0,3.0,14.0,3.0,0.17647058823529413,-1.0,0.0,0.0,7.0,20.0,4.0,6.0,194.0,41.0,8.0,3.0,448.0,0.3333333333333333,0.1,0.3333333333333333,0.3333333333333333,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.3333333333333333,0.3333333333333333,0.03076923076923077,0.03076923076923077,0.6666666666666666,0.6666666666666666
"ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }",-1.0,0.0,0.0,8.0,17.0,4.0,4.0,173.0,39.0,4.0,4.0,378.0,11.0,0.6470588235294118,-1.0,0.0,0.0,3.0,3.0,0.0,2.0,28.0,5.0,4.0,2.0,84.0,1.0,1.0,1.0909090909090908,0.9090909090909091,1.0,1.0,0.18181818181818182,0.09090909090909091,1.0,0.09090909090909091,-1.0,-1.0,1.0,1.0,0.09090909090909091,0.09090909090909091,0.8307692307692308,0.8307692307692308,4.909090909090909,4.909090909090909
"ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;",-1.0,0.0,0.0,8.0,17.0,4.0,5.0,179.0,40.0,5.0,4.0,392.0,12.0,0.7058823529411765,-1.0,0.0,0.0,3.0,3.0,0.0,1.0,22.0,4.0,3.0,2.0,70.0,1.0,1.0,1.0,0.08333333333333333,1.0,1.0,0.08333333333333333,0.16666666666666666,1.0,0.08333333333333333,-1.0,-1.0,1.0,1.0,0.08333333333333333,0.08333333333333333,0.8615384615384616,0.8615384615384616,4.666666666666667,4.666666666666667
"ManualAction m;
Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;
return clone;",-1.0,0.0,0.0,8.0,17.0,4.0,5.0,181.0,41.0,5.0,4.0,399.0,13.0,0.7647058823529411,-1.0,0.0,0.0,3.0,3.0,0.0,1.0,20.0,3.0,3.0,2.0,63.0,1.0,1.0,0.9230769230769231,0.07692307692307693,1.0,1.0,0.07692307692307693,0.15384615384615385,1.0,0.07692307692307693,-1.0,-1.0,1.0,1.0,0.07692307692307693,0.07692307692307693,0.8769230769230769,0.8769230769230769,4.384615384615385,4.384615384615385
Template t;,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,2.0,1.0,0.0,1.0,7.0,1.0,0.058823529411764705,-1.0,0.0,0.0,10.0,20.0,4.0,6.0,199.0,43.0,8.0,5.0,455.0,0.1,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.015384615384615385,0.015384615384615385,1.0,1.0
"Template t;
Date[] dates;",-1.0,0.0,0.0,3.0,0.0,0.0,0.0,5.0,2.0,0.0,2.0,7.0,2.0,0.11764705882352941,-1.0,0.0,0.0,8.0,20.0,4.0,6.0,196.0,42.0,8.0,4.0,455.0,0.1,0.08333333333333333,0.5,0.5,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.5,0.5,0.015384615384615385,0.015384615384615385,0.5,0.5
"Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }",-1.0,0.0,0.0,7.0,17.0,4.0,4.0,171.0,38.0,4.0,3.0,371.0,10.0,0.5882352941176471,-1.0,0.0,0.0,4.0,3.0,0.0,2.0,30.0,6.0,4.0,3.0,91.0,1.0,1.0,1.2,1.0,1.0,1.0,0.2,0.1,1.0,0.1,-1.0,-1.0,1.0,1.0,0.1,0.1,0.8153846153846154,0.8153846153846154,5.3,5.3
"Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;",-1.0,0.0,0.0,7.0,17.0,4.0,5.0,177.0,39.0,5.0,3.0,385.0,11.0,0.6470588235294118,-1.0,0.0,0.0,4.0,3.0,0.0,1.0,24.0,5.0,3.0,3.0,77.0,1.0,1.0,1.0909090909090908,0.09090909090909091,1.0,1.0,0.09090909090909091,0.18181818181818182,1.0,0.09090909090909091,-1.0,-1.0,1.0,1.0,0.09090909090909091,0.09090909090909091,0.8461538461538461,0.8461538461538461,5.0,5.0
"Template t;
Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;
return clone;",-1.0,0.0,0.0,7.0,17.0,4.0,5.0,179.0,40.0,5.0,3.0,392.0,12.0,0.7058823529411765,-1.0,0.0,0.0,4.0,3.0,0.0,1.0,22.0,4.0,3.0,3.0,70.0,1.0,1.0,1.0,0.08333333333333333,1.0,1.0,0.08333333333333333,0.16666666666666666,1.0,0.08333333333333333,-1.0,-1.0,1.0,1.0,0.08333333333333333,0.08333333333333333,0.8615384615384616,0.8615384615384616,4.666666666666667,4.666666666666667
Date[] dates;,-1.0,0.0,0.0,2.0,0.0,0.0,0.0,3.0,1.0,0.0,1.0,0.0,1.0,0.058823529411764705,-1.0,0.0,0.0,9.0,20.0,4.0,6.0,198.0,43.0,8.0,5.0,462.0,0.08333333333333333,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0
"Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }",-1.0,0.0,0.0,6.0,17.0,4.0,4.0,169.0,37.0,4.0,2.0,364.0,9.0,0.5294117647058824,-1.0,0.0,0.0,5.0,3.0,0.0,2.0,32.0,7.0,4.0,4.0,98.0,1.0,1.0,1.3333333333333333,0.2222222222222222,1.0,1.0,0.2222222222222222,0.1111111111111111,1.0,0.1111111111111111,-1.0,-1.0,1.0,1.0,0.1111111111111111,0.1111111111111111,0.8,0.8,5.777777777777778,5.777777777777778
"Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;",-1.0,0.0,0.0,6.0,17.0,4.0,5.0,175.0,38.0,5.0,2.0,378.0,10.0,0.5882352941176471,-1.0,0.0,0.0,5.0,3.0,0.0,1.0,26.0,6.0,3.0,4.0,84.0,1.0,1.0,1.2,0.1,1.0,1.0,0.1,0.2,1.0,0.1,-1.0,-1.0,1.0,1.0,0.1,0.1,0.8307692307692308,0.8307692307692308,5.4,5.4
"Date[] dates;
for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;
return clone;",-1.0,0.0,0.0,6.0,17.0,4.0,5.0,177.0,39.0,5.0,2.0,385.0,11.0,0.6470588235294118,-1.0,0.0,0.0,5.0,3.0,0.0,1.0,24.0,5.0,3.0,4.0,77.0,1.0,1.0,1.0909090909090908,0.09090909090909091,1.0,1.0,0.09090909090909091,0.18181818181818182,1.0,0.09090909090909091,-1.0,-1.0,1.0,1.0,0.09090909090909091,0.09090909090909091,0.8461538461538461,0.8461538461538461,5.0,5.0
"for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }",-1.0,0.0,0.0,4.0,17.0,4.0,4.0,166.0,36.0,4.0,1.0,364.0,8.0,0.47058823529411764,-1.0,0.0,0.0,7.0,3.0,0.0,2.0,35.0,8.0,4.0,5.0,98.0,1.0,1.0,0.25,0.75,1.0,1.0,0.25,0.125,1.0,0.125,-1.0,-1.0,1.0,1.0,0.125,0.125,0.8,0.8,6.5,6.5
"for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;",-1.0,0.0,0.0,4.0,17.0,4.0,5.0,172.0,37.0,5.0,1.0,378.0,9.0,0.5294117647058824,-1.0,0.0,0.0,7.0,3.0,0.0,1.0,29.0,7.0,3.0,5.0,84.0,1.0,1.0,0.1111111111111111,0.2222222222222222,1.0,1.0,0.1111111111111111,0.2222222222222222,1.0,0.1111111111111111,-1.0,-1.0,1.0,1.0,0.1111111111111111,0.1111111111111111,0.8307692307692308,0.8307692307692308,6.0,6.0
"for (int i = 0; i < curInd; i++) {
            d = actions.get(i);
            if (templateDates.containsKey(i)) {
                t = (Template) d;
                dates = templateDates.get(i);
//                if (dates == null)
//                    clone.addTemplate(t, null, null, t.getAppliedAction());
                /*{*/if (dates[0] != null && dates[1] != null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] == null && dates[1] != null)
                    clone.addTemplate(t, null,
                                      new Date(dates[1].getTime()),
                                      t.getAppliedAction());
                else if (dates[0] != null && dates[1] == null)
                    clone.addTemplate(t, new Date(dates[0].getTime()),
                                      null,
                                      t.getAppliedAction());
                else
                    clone.addTemplate(t, null, null, t.getAppliedAction());/*}*/
            } else {
                m = (ManualAction) d;
                clone.addManualAction((ManualAction) m.clone());
            }
        }
clone.listeners = null;
return clone;",-1.0,0.0,0.0,4.0,17.0,4.0,5.0,174.0,38.0,5.0,1.0,385.0,10.0,0.5882352941176471,-1.0,0.0,0.0,7.0,3.0,0.0,1.0,27.0,6.0,3.0,5.0,77.0,1.0,1.0,0.1,0.2,1.0,1.0,0.1,0.2,1.0,0.1,-1.0,-1.0,1.0,1.0,0.1,0.1,0.8461538461538461,0.8461538461538461,5.5,5.5
clone.listeners = null;,-1.0,0.0,0.0,0.0,0.0,0.0,1.0,6.0,1.0,1.0,0.0,14.0,1.0,0.058823529411764705,-1.0,0.0,0.0,11.0,20.0,4.0,5.0,195.0,43.0,7.0,6.0,448.0,1.0,0.1111111111111111,1.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.03076923076923077,0.03076923076923077,2.0,2.0
"clone.listeners = null;
return clone;",-1.0,0.0,0.0,0.0,0.0,0.0,1.0,8.0,2.0,1.0,0.0,21.0,2.0,0.11764705882352941,-1.0,0.0,0.0,11.0,20.0,4.0,5.0,193.0,42.0,7.0,6.0,441.0,1.0,0.2222222222222222,0.5,1.0,1.0,0.0,0.5,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.046153846153846156,0.046153846153846156,1.5,1.5
return clone;,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,1.0,0.0,0.0,7.0,1.0,0.058823529411764705,-1.0,0.0,0.0,11.0,20.0,4.0,6.0,199.0,43.0,8.0,6.0,455.0,0.1111111111111111,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.015384615384615385,0.015384615384615385,1.0,1.0
t.add(orTasks[i]);,-1.0,0.0,0.0,0.0,1.0,0.0,0.0,7.0,3.0,0.0,0.0,21.0,1.0,0.06666666666666667,-1.0,0.0,0.0,14.0,7.0,1.0,1.0,78.0,19.0,4.0,6.0,189.0,0.3333333333333333,0.3333333333333333,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.10344827586206896,0.10344827586206896,3.0,3.0
s.add(pastSolutions.get(i));,-1.0,0.0,0.0,0.0,2.0,0.0,0.0,6.0,2.0,1.0,0.0,21.0,1.0,0.06666666666666667,-1.0,0.0,0.0,14.0,6.0,1.0,1.0,79.0,20.0,3.0,6.0,189.0,0.3333333333333333,0.3333333333333333,1.0,1.0,0.3333333333333333,0.0,1.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.10344827586206896,0.10344827586206896,3.0,3.0
"for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }",-1.0,0.0,0.0,1.0,3.0,0.0,0.0,17.0,5.0,2.0,1.0,42.0,2.0,0.13333333333333333,-1.0,0.0,0.0,13.0,5.0,1.0,1.0,68.0,17.0,2.0,5.0,168.0,1.0,0.6666666666666666,2.0,1.0,0.6666666666666666,0.0,1.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,0.5,0.0,0.20689655172413793,0.20689655172413793,3.0,3.0
clone = (TaskManager)super.clone();,-1.0,0.0,0.0,1.0,1.0,0.0,1.0,6.0,1.0,0.0,0.0,14.0,1.0,0.06666666666666667,-1.0,0.0,0.0,13.0,7.0,1.0,0.0,79.0,21.0,4.0,6.0,196.0,0.2,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.06896551724137931,0.06896551724137931,2.0,2.0
"clone = (TaskManager)super.clone();
ArrayList<Task> t = new ArrayList<Task>();",-1.0,0.0,0.0,4.0,1.0,0.0,1.0,11.0,2.0,0.0,1.0,28.0,2.0,0.13333333333333333,-1.0,0.0,0.0,10.0,7.0,1.0,0.0,74.0,20.0,4.0,5.0,182.0,0.3333333333333333,0.2,0.5,0.5,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.5,0.5,0.13793103448275862,0.13793103448275862,2.0,2.0
"clone = (TaskManager)super.clone();
ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();",-1.0,0.0,0.0,6.0,2.0,0.0,1.0,17.0,3.0,0.0,2.0,42.0,3.0,0.2,-1.0,0.0,0.0,8.0,6.0,1.0,0.0,68.0,19.0,4.0,4.0,168.0,0.3333333333333333,0.3333333333333333,0.3333333333333333,0.3333333333333333,0.0,0.0,0.0,0.0,1.0,0.3333333333333333,-1.0,-1.0,1.0,1.0,0.3333333333333333,0.3333333333333333,0.20689655172413793,0.20689655172413793,2.0,2.0
"clone = (TaskManager)super.clone();
ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }",-1.0,0.0,0.0,7.0,3.0,0.0,1.0,37.0,10.0,1.0,3.0,84.0,5.0,0.3333333333333333,-1.0,0.0,0.0,7.0,5.0,1.0,0.0,48.0,12.0,3.0,3.0,126.0,1.0,1.0,0.6,0.8,1.0,0.0,0.2,0.0,1.0,0.2,-1.0,-1.0,1.0,1.0,0.2,0.2,0.41379310344827586,0.41379310344827586,2.4,2.4
"clone = (TaskManager)super.clone();
ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);",-1.0,0.0,0.0,7.0,4.0,0.0,1.0,44.0,12.0,1.0,3.0,105.0,6.0,0.4,-1.0,0.0,0.0,7.0,4.0,1.0,0.0,41.0,10.0,3.0,3.0,105.0,1.0,1.0,0.5,0.5,1.0,0.0,0.16666666666666666,0.0,1.0,0.16666666666666666,-1.0,-1.0,1.0,1.0,0.16666666666666666,0.16666666666666666,0.5172413793103449,0.5172413793103449,2.5,2.5
"clone = (TaskManager)super.clone();
ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();",-1.0,0.0,0.0,10.0,4.0,0.0,1.0,49.0,13.0,1.0,4.0,119.0,7.0,0.4666666666666667,-1.0,0.0,0.0,4.0,4.0,1.0,0.0,36.0,9.0,3.0,2.0,91.0,1.0,1.0,0.42857142857142855,0.42857142857142855,1.0,0.0,0.14285714285714285,0.0,1.0,0.14285714285714285,-1.0,-1.0,1.0,1.0,0.14285714285714285,0.14285714285714285,0.5862068965517241,0.5862068965517241,2.4285714285714284,2.4285714285714284
"clone = (TaskManager)super.clone();
ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/",-1.0,0.0,0.0,11.0,7.0,0.0,1.0,70.0,18.0,4.0,5.0,168.0,10.0,0.6666666666666666,-1.0,0.0,0.0,3.0,1.0,1.0,0.0,15.0,4.0,0.0,1.0,42.0,1.0,1.0,0.3,0.3,1.0,1.0,0.3,0.1,1.0,0.1,-1.0,-1.0,1.0,1.0,0.1,0.1,0.8275862068965517,0.8275862068965517,2.4,2.4
"clone = (TaskManager)super.clone();
ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);",-1.0,0.0,0.0,11.0,8.0,1.0,1.0,77.0,20.0,4.0,5.0,189.0,11.0,0.7333333333333333,-1.0,0.0,0.0,3.0,0.0,0.0,0.0,8.0,2.0,0.0,1.0,21.0,1.0,1.0,0.2727272727272727,0.2727272727272727,1.0,1.0,0.2727272727272727,0.09090909090909091,1.0,0.09090909090909091,-1.0,-1.0,1.0,1.0,0.09090909090909091,0.09090909090909091,0.9310344827586207,0.9310344827586207,2.4545454545454546,2.4545454545454546
"clone = (TaskManager)super.clone();
ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);
return clone;",-1.0,0.0,0.0,11.0,8.0,1.0,1.0,79.0,21.0,4.0,5.0,196.0,12.0,0.8,-1.0,0.0,0.0,3.0,0.0,0.0,0.0,6.0,1.0,0.0,1.0,14.0,1.0,1.0,0.25,0.25,1.0,1.0,0.25,0.08333333333333333,1.0,0.08333333333333333,-1.0,-1.0,1.0,1.0,0.08333333333333333,0.08333333333333333,0.9655172413793104,0.9655172413793104,2.3333333333333335,2.3333333333333335
ArrayList<Task> t = new ArrayList<Task>();,-1.0,0.0,0.0,3.0,0.0,0.0,0.0,5.0,1.0,0.0,1.0,14.0,1.0,0.06666666666666667,-1.0,0.0,0.0,11.0,8.0,1.0,1.0,80.0,21.0,4.0,5.0,196.0,0.3333333333333333,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,1.0,1.0,0.06896551724137931,0.06896551724137931,2.0,2.0
"ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();",-1.0,0.0,0.0,5.0,1.0,0.0,0.0,11.0,2.0,0.0,2.0,28.0,2.0,0.13333333333333333,-1.0,0.0,0.0,9.0,7.0,1.0,1.0,74.0,20.0,4.0,4.0,182.0,0.3333333333333333,0.3333333333333333,0.5,0.5,0.0,0.0,0.0,0.0,1.0,0.5,-1.0,-1.0,1.0,1.0,0.5,0.5,0.13793103448275862,0.13793103448275862,2.0,2.0
"ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }",-1.0,0.0,0.0,6.0,2.0,0.0,0.0,31.0,9.0,1.0,3.0,70.0,4.0,0.26666666666666666,-1.0,0.0,0.0,8.0,6.0,1.0,1.0,54.0,13.0,3.0,3.0,140.0,1.0,1.0,0.75,1.0,1.0,0.0,0.25,0.0,1.0,0.25,-1.0,-1.0,1.0,1.0,0.25,0.25,0.3448275862068966,0.3448275862068966,2.5,2.5
"ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);",-1.0,0.0,0.0,6.0,3.0,0.0,0.0,38.0,11.0,1.0,3.0,91.0,5.0,0.3333333333333333,-1.0,0.0,0.0,8.0,5.0,1.0,1.0,47.0,11.0,3.0,3.0,119.0,1.0,1.0,0.6,0.6,1.0,0.0,0.2,0.0,1.0,0.2,-1.0,-1.0,1.0,1.0,0.2,0.2,0.4482758620689655,0.4482758620689655,2.6,2.6
"ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();",-1.0,0.0,0.0,9.0,3.0,0.0,0.0,43.0,12.0,1.0,4.0,105.0,6.0,0.4,-1.0,0.0,0.0,5.0,5.0,1.0,1.0,42.0,10.0,3.0,2.0,105.0,1.0,1.0,0.5,0.5,1.0,0.0,0.16666666666666666,0.0,1.0,0.16666666666666666,-1.0,-1.0,1.0,1.0,0.16666666666666666,0.16666666666666666,0.5172413793103449,0.5172413793103449,2.5,2.5
"ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/",-1.0,0.0,0.0,10.0,6.0,0.0,0.0,64.0,17.0,4.0,5.0,154.0,9.0,0.6,-1.0,0.0,0.0,4.0,2.0,1.0,1.0,21.0,5.0,0.0,1.0,56.0,1.0,1.0,0.3333333333333333,0.3333333333333333,1.0,1.0,0.3333333333333333,0.1111111111111111,1.0,0.1111111111111111,-1.0,-1.0,1.0,1.0,0.1111111111111111,0.1111111111111111,0.7586206896551724,0.7586206896551724,2.4444444444444446,2.4444444444444446
"ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);",-1.0,0.0,0.0,10.0,7.0,1.0,0.0,71.0,19.0,4.0,5.0,175.0,10.0,0.6666666666666666,-1.0,0.0,0.0,4.0,1.0,0.0,1.0,14.0,3.0,0.0,1.0,35.0,1.0,1.0,0.3,0.3,1.0,1.0,0.3,0.1,1.0,0.1,-1.0,-1.0,1.0,1.0,0.1,0.1,0.8620689655172413,0.8620689655172413,2.5,2.5
"ArrayList<Task> t = new ArrayList<Task>();
Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);
return clone;",-1.0,0.0,0.0,10.0,7.0,1.0,0.0,73.0,20.0,4.0,5.0,182.0,11.0,0.7333333333333333,-1.0,0.0,0.0,4.0,1.0,0.0,1.0,12.0,2.0,0.0,1.0,28.0,1.0,1.0,0.2727272727272727,0.2727272727272727,1.0,1.0,0.2727272727272727,0.09090909090909091,1.0,0.09090909090909091,-1.0,-1.0,1.0,1.0,0.09090909090909091,0.09090909090909091,0.896551724137931,0.896551724137931,2.3636363636363638,2.3636363636363638
Task[] orTasks = tasks();,-1.0,0.0,0.0,2.0,1.0,0.0,0.0,6.0,1.0,0.0,1.0,14.0,1.0,0.06666666666666667,-1.0,0.0,0.0,12.0,7.0,1.0,1.0,79.0,21.0,4.0,5.0,196.0,0.3333333333333333,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,0.06896551724137931,0.06896551724137931,2.0,2.0
"Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }",-1.0,0.0,0.0,3.0,2.0,0.0,0.0,26.0,8.0,1.0,2.0,56.0,3.0,0.2,-1.0,0.0,0.0,11.0,6.0,1.0,1.0,59.0,14.0,3.0,4.0,154.0,1.0,1.0,1.0,1.3333333333333333,1.0,0.0,0.3333333333333333,0.0,1.0,0.3333333333333333,-1.0,-1.0,1.0,1.0,0.3333333333333333,0.3333333333333333,0.27586206896551724,0.27586206896551724,2.6666666666666665,2.6666666666666665
"Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);",-1.0,0.0,0.0,3.0,3.0,0.0,0.0,33.0,10.0,1.0,2.0,77.0,4.0,0.26666666666666666,-1.0,0.0,0.0,11.0,5.0,1.0,1.0,52.0,12.0,3.0,4.0,133.0,1.0,1.0,0.75,1.0,1.0,0.0,0.25,0.0,1.0,0.25,-1.0,-1.0,1.0,1.0,0.25,0.25,0.3793103448275862,0.3793103448275862,2.75,2.75
"Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();",-1.0,0.0,0.0,6.0,3.0,0.0,0.0,38.0,11.0,1.0,3.0,91.0,5.0,0.3333333333333333,-1.0,0.0,0.0,8.0,5.0,1.0,1.0,47.0,11.0,3.0,3.0,119.0,1.0,1.0,0.6,0.8,1.0,0.0,0.2,0.0,1.0,0.2,-1.0,-1.0,1.0,1.0,0.2,0.2,0.4482758620689655,0.4482758620689655,2.6,2.6
"Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/",-1.0,0.0,0.0,7.0,6.0,0.0,0.0,59.0,16.0,4.0,4.0,140.0,8.0,0.5333333333333333,-1.0,0.0,0.0,7.0,2.0,1.0,1.0,26.0,6.0,0.0,2.0,70.0,1.0,1.0,0.375,0.375,1.0,1.0,0.375,0.125,1.0,0.125,-1.0,-1.0,1.0,1.0,0.125,0.125,0.6896551724137931,0.6896551724137931,2.5,2.5
"Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);",-1.0,0.0,0.0,7.0,7.0,1.0,0.0,66.0,18.0,4.0,4.0,161.0,9.0,0.6,-1.0,0.0,0.0,7.0,1.0,0.0,1.0,19.0,4.0,0.0,2.0,49.0,1.0,1.0,0.3333333333333333,0.3333333333333333,1.0,1.0,0.3333333333333333,0.1111111111111111,1.0,0.1111111111111111,-1.0,-1.0,1.0,1.0,0.1111111111111111,0.1111111111111111,0.7931034482758621,0.7931034482758621,2.5555555555555554,2.5555555555555554
"Task[] orTasks = tasks();
for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);
return clone;",-1.0,0.0,0.0,7.0,7.0,1.0,0.0,68.0,19.0,4.0,4.0,168.0,10.0,0.6666666666666666,-1.0,0.0,0.0,7.0,1.0,0.0,1.0,17.0,3.0,0.0,2.0,42.0,1.0,1.0,0.3,0.3,1.0,1.0,0.3,0.1,1.0,0.1,-1.0,-1.0,1.0,1.0,0.1,0.1,0.8275862068965517,0.8275862068965517,2.4,2.4
"for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }",-1.0,0.0,0.0,1.0,1.0,0.0,0.0,20.0,7.0,1.0,1.0,42.0,2.0,0.13333333333333333,-1.0,0.0,0.0,13.0,7.0,1.0,1.0,65.0,15.0,3.0,5.0,168.0,1.0,1.0,2.0,0.5,1.0,0.0,0.5,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,0.5,0.0,0.20689655172413793,0.20689655172413793,3.0,3.0
"for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);",-1.0,0.0,0.0,1.0,2.0,0.0,0.0,27.0,9.0,1.0,1.0,63.0,3.0,0.2,-1.0,0.0,0.0,13.0,6.0,1.0,1.0,58.0,13.0,3.0,5.0,147.0,1.0,1.0,1.3333333333333333,0.3333333333333333,1.0,0.0,0.3333333333333333,0.0,1.0,0.3333333333333333,-1.0,-1.0,1.0,0.0,0.3333333333333333,0.0,0.3103448275862069,0.3103448275862069,3.0,3.0
"for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();",-1.0,0.0,0.0,4.0,2.0,0.0,0.0,32.0,10.0,1.0,2.0,77.0,4.0,0.26666666666666666,-1.0,0.0,0.0,10.0,6.0,1.0,1.0,53.0,12.0,3.0,4.0,133.0,1.0,1.0,1.0,0.25,1.0,0.0,0.25,0.0,1.0,0.25,-1.0,-1.0,1.0,1.0,0.25,0.25,0.3793103448275862,0.3793103448275862,2.75,2.75
"for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/",-1.0,0.0,0.0,5.0,5.0,0.0,0.0,53.0,15.0,4.0,3.0,126.0,7.0,0.4666666666666667,-1.0,0.0,0.0,9.0,3.0,1.0,1.0,32.0,7.0,0.0,3.0,84.0,1.0,1.0,0.42857142857142855,0.5714285714285714,1.0,1.0,0.42857142857142855,0.14285714285714285,1.0,0.14285714285714285,-1.0,-1.0,1.0,1.0,0.14285714285714285,0.14285714285714285,0.6206896551724138,0.6206896551724138,2.5714285714285716,2.5714285714285716
"for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);",-1.0,0.0,0.0,5.0,6.0,1.0,0.0,60.0,17.0,4.0,3.0,147.0,8.0,0.5333333333333333,-1.0,0.0,0.0,9.0,2.0,0.0,1.0,25.0,5.0,0.0,3.0,63.0,1.0,1.0,0.375,0.5,1.0,1.0,0.375,0.125,1.0,0.125,-1.0,-1.0,1.0,1.0,0.125,0.125,0.7241379310344828,0.7241379310344828,2.625,2.625
"for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);
return clone;",-1.0,0.0,0.0,5.0,6.0,1.0,0.0,62.0,18.0,4.0,3.0,154.0,9.0,0.6,-1.0,0.0,0.0,9.0,2.0,0.0,1.0,23.0,4.0,0.0,3.0,56.0,1.0,1.0,0.3333333333333333,0.4444444444444444,1.0,1.0,0.3333333333333333,0.1111111111111111,1.0,0.1111111111111111,-1.0,-1.0,1.0,1.0,0.1111111111111111,0.1111111111111111,0.7586206896551724,0.7586206896551724,2.4444444444444446,2.4444444444444446
clone.setTasks(t);,-1.0,0.0,0.0,0.0,1.0,0.0,0.0,7.0,2.0,0.0,0.0,21.0,1.0,0.06666666666666667,-1.0,0.0,0.0,14.0,7.0,1.0,1.0,78.0,20.0,4.0,6.0,189.0,0.3333333333333333,0.2,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.10344827586206896,0.10344827586206896,3.0,3.0
"clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();",-1.0,0.0,0.0,3.0,1.0,0.0,0.0,12.0,3.0,0.0,1.0,35.0,2.0,0.13333333333333333,-1.0,0.0,0.0,11.0,7.0,1.0,1.0,73.0,19.0,4.0,5.0,175.0,0.3333333333333333,0.3333333333333333,0.5,0.5,0.0,0.0,0.0,0.0,1.0,0.5,-1.0,-1.0,1.0,1.0,0.5,0.5,0.1724137931034483,0.1724137931034483,2.5,2.5
"clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/",-1.0,0.0,0.0,4.0,4.0,0.0,0.0,33.0,8.0,3.0,2.0,84.0,5.0,0.3333333333333333,-1.0,0.0,0.0,10.0,4.0,1.0,1.0,52.0,14.0,1.0,4.0,126.0,1.0,1.0,0.6,0.8,1.0,0.0,0.6,0.0,1.0,0.2,-1.0,-1.0,1.0,1.0,0.2,0.2,0.41379310344827586,0.41379310344827586,2.4,2.4
"clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);",-1.0,0.0,0.0,4.0,5.0,1.0,0.0,40.0,10.0,3.0,2.0,105.0,6.0,0.4,-1.0,0.0,0.0,10.0,3.0,0.0,1.0,45.0,12.0,1.0,4.0,105.0,1.0,1.0,0.5,0.6666666666666666,1.0,0.0,0.5,0.0,1.0,0.16666666666666666,-1.0,-1.0,1.0,1.0,0.16666666666666666,0.16666666666666666,0.5172413793103449,0.5172413793103449,2.5,2.5
"clone.setTasks(t);
ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);
return clone;",-1.0,0.0,0.0,4.0,5.0,1.0,0.0,42.0,11.0,3.0,2.0,112.0,7.0,0.4666666666666667,-1.0,0.0,0.0,10.0,3.0,0.0,1.0,43.0,11.0,1.0,4.0,98.0,1.0,1.0,0.42857142857142855,0.5714285714285714,1.0,0.0,0.42857142857142855,0.0,1.0,0.14285714285714285,-1.0,-1.0,1.0,1.0,0.14285714285714285,0.14285714285714285,0.5517241379310345,0.5517241379310345,2.2857142857142856,2.2857142857142856
ArrayList<Solution> s = new ArrayList<Solution>();,-1.0,0.0,0.0,3.0,0.0,0.0,0.0,5.0,1.0,0.0,1.0,14.0,1.0,0.06666666666666667,-1.0,0.0,0.0,11.0,8.0,1.0,1.0,80.0,21.0,4.0,5.0,196.0,0.3333333333333333,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,1.0,1.0,0.06896551724137931,0.06896551724137931,2.0,2.0
"ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/",-1.0,0.0,0.0,4.0,3.0,0.0,0.0,26.0,6.0,3.0,2.0,63.0,4.0,0.26666666666666666,-1.0,0.0,0.0,10.0,5.0,1.0,1.0,59.0,16.0,1.0,4.0,147.0,1.0,1.0,0.75,1.0,1.0,0.0,0.75,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.25,0.25,0.3103448275862069,0.3103448275862069,2.25,2.25
"ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);",-1.0,0.0,0.0,4.0,4.0,1.0,0.0,33.0,8.0,3.0,2.0,84.0,5.0,0.3333333333333333,-1.0,0.0,0.0,10.0,4.0,0.0,1.0,52.0,14.0,1.0,4.0,126.0,1.0,1.0,0.6,0.8,1.0,0.0,0.6,0.0,1.0,0.2,-1.0,-1.0,1.0,1.0,0.2,0.2,0.41379310344827586,0.41379310344827586,2.4,2.4
"ArrayList<Solution> s = new ArrayList<Solution>();
if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);
return clone;",-1.0,0.0,0.0,4.0,4.0,1.0,0.0,35.0,9.0,3.0,2.0,91.0,6.0,0.4,-1.0,0.0,0.0,10.0,4.0,0.0,1.0,50.0,13.0,1.0,4.0,119.0,1.0,1.0,0.5,0.6666666666666666,1.0,0.0,0.5,0.0,1.0,0.16666666666666666,-1.0,-1.0,1.0,1.0,0.16666666666666666,0.16666666666666666,0.4482758620689655,0.4482758620689655,2.1666666666666665,2.1666666666666665
"if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/",-1.0,0.0,0.0,1.0,3.0,0.0,0.0,21.0,5.0,3.0,1.0,49.0,3.0,0.2,-1.0,0.0,0.0,13.0,5.0,1.0,1.0,64.0,17.0,1.0,5.0,161.0,1.0,1.0,1.0,1.3333333333333333,1.0,0.0,1.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,0.3333333333333333,0.0,0.2413793103448276,0.2413793103448276,2.3333333333333335,2.3333333333333335
"if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);",-1.0,0.0,0.0,1.0,4.0,1.0,0.0,28.0,7.0,3.0,1.0,70.0,4.0,0.26666666666666666,-1.0,0.0,0.0,13.0,4.0,0.0,1.0,57.0,15.0,1.0,5.0,140.0,1.0,1.0,0.75,1.0,1.0,0.0,0.75,0.0,1.0,0.25,-1.0,-1.0,1.0,0.0,0.25,0.0,0.3448275862068966,0.3448275862068966,2.5,2.5
"if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
clone.setPastSolutions(s);
return clone;",-1.0,0.0,0.0,1.0,4.0,1.0,0.0,30.0,8.0,3.0,1.0,77.0,5.0,0.3333333333333333,-1.0,0.0,0.0,13.0,4.0,0.0,1.0,55.0,14.0,1.0,5.0,133.0,1.0,1.0,0.6,0.8,1.0,0.0,0.6,0.0,1.0,0.2,-1.0,-1.0,1.0,0.0,0.2,0.0,0.3793103448275862,0.3793103448275862,2.2,2.2
clone.setPastSolutions(s);,-1.0,0.0,0.0,0.0,1.0,0.0,0.0,7.0,2.0,0.0,0.0,21.0,1.0,0.06666666666666667,-1.0,0.0,0.0,14.0,7.0,1.0,1.0,78.0,20.0,4.0,6.0,189.0,0.3333333333333333,0.2,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.10344827586206896,0.10344827586206896,3.0,3.0
"clone.setPastSolutions(s);
return clone;",-1.0,0.0,0.0,0.0,1.0,0.0,0.0,9.0,3.0,0.0,0.0,28.0,2.0,0.13333333333333333,-1.0,0.0,0.0,14.0,7.0,1.0,1.0,76.0,19.0,4.0,6.0,182.0,0.4,0.3333333333333333,1.0,0.5,0.0,0.0,0.0,0.0,1.0,0.5,-1.0,-1.0,0.0,0.0,0.0,0.0,0.13793103448275862,0.13793103448275862,2.0,2.0
return clone;,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,1.0,0.0,0.0,7.0,1.0,0.06666666666666667,-1.0,0.0,0.0,14.0,8.0,1.0,1.0,83.0,21.0,4.0,6.0,203.0,0.2,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.034482758620689655,0.034482758620689655,1.0,1.0
return null;,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.06666666666666667,-1.0,0.0,0.0,14.0,8.0,1.0,1.0,84.0,22.0,4.0,6.0,210.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
TaskManager clone;,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,2.0,1.0,0.0,1.0,7.0,1.0,0.06666666666666667,-1.0,0.0,0.0,13.0,8.0,1.0,1.0,83.0,21.0,4.0,5.0,203.0,0.2,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.034482758620689655,0.034482758620689655,1.0,1.0
"TaskManager clone;
try {
            clone = (TaskManager)super.clone();
            ArrayList<Task> t = new ArrayList<Task>();
            Task[] orTasks = tasks();
            for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
            clone.setTasks(t);
            /*{*/ArrayList<Solution> s = new ArrayList<Solution>();
            if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
            clone.setPastSolutions(s);
            return clone;
        } catch (CloneNotSupportedException e) {
            return null;
        }",-1.0,0.0,0.0,13.0,8.0,1.0,1.0,84.0,22.0,4.0,6.0,203.0,15.0,1.0,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,7.0,1.0,1.0,0.2,0.2,1.0,1.0,0.2,0.06666666666666667,1.0,0.06666666666666667,-1.0,-1.0,1.0,1.0,0.06666666666666667,0.06666666666666667,1.0,1.0,1.9333333333333333,1.9333333333333333
"try {
            clone = (TaskManager)super.clone();
            ArrayList<Task> t = new ArrayList<Task>();
            Task[] orTasks = tasks();
            for (int i = 0; i < orTasks.length; i++) {
                t.add(orTasks[i]);
            }
            clone.setTasks(t);
            /*{*/ArrayList<Solution> s = new ArrayList<Solution>();
            if (pastSolutions != null) {
                for (int i = 0; i < pastSolutions.size(); i++) {
                    s.add(pastSolutions.get(i));
                }
            }/*}*/
            clone.setPastSolutions(s);
            return clone;
        } catch (CloneNotSupportedException e) {
            return null;
        }",-1.0,0.0,0.0,12.0,8.0,1.0,1.0,82.0,21.0,4.0,5.0,196.0,14.0,0.9333333333333333,-1.0,0.0,0.0,2.0,0.0,0.0,0.0,3.0,1.0,0.0,1.0,14.0,1.0,1.0,0.21428571428571427,0.21428571428571427,1.0,1.0,0.21428571428571427,0.07142857142857142,1.0,0.07142857142857142,-1.0,-1.0,1.0,1.0,0.07142857142857142,0.07142857142857142,0.9655172413793104,0.9655172413793104,2.0,2.0
"if (expandedTasks[i].name().equals(t.name()))
                periods++;",-1.0,0.0,0.0,0.0,3.0,0.0,0.0,16.0,2.0,0.0,0.0,42.0,1.0,0.1,-1.0,0.0,0.0,11.0,4.0,2.0,1.0,77.0,16.0,2.0,5.0,175.0,0.5,0.3333333333333333,1.0,1.0,0.0,0.0,0.0,0.0,0.5,2.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.2222222222222222,0.2222222222222222,6.0,6.0
instances[k] = expandedTasks[i];,-1.0,0.0,0.0,0.0,0.0,0.0,1.0,11.0,3.0,0.0,0.0,28.0,1.0,0.1,-1.0,0.0,0.0,11.0,7.0,2.0,0.0,82.0,15.0,2.0,5.0,189.0,0.3333333333333333,0.3333333333333333,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.14814814814814814,0.14814814814814814,4.0,4.0
"instances[k] = expandedTasks[i];
k++;",-1.0,0.0,0.0,0.0,0.0,0.0,1.0,14.0,4.0,0.0,0.0,35.0,2.0,0.2,-1.0,0.0,0.0,11.0,7.0,2.0,0.0,79.0,14.0,2.0,5.0,182.0,0.6666666666666666,0.3333333333333333,1.0,0.5,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.18518518518518517,0.18518518518518517,2.5,2.5
k++;,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,1.0,0.0,0.0,7.0,1.0,0.1,-1.0,0.0,0.0,11.0,7.0,2.0,1.0,90.0,17.0,2.0,5.0,210.0,0.3333333333333333,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.037037037037037035,0.037037037037037035,1.0,1.0
"if (expandedTasks[i].name().equals(t.name())) {
                instances[k] = expandedTasks[i];
                k++;
            }",-1.0,0.0,0.0,0.0,3.0,0.0,1.0,27.0,5.0,0.0,0.0,70.0,3.0,0.3,-1.0,0.0,0.0,11.0,4.0,2.0,0.0,66.0,13.0,2.0,5.0,147.0,0.6666666666666666,0.5,0.6666666666666666,0.3333333333333333,0.0,0.0,0.0,0.0,0.5,0.6666666666666666,-1.0,-1.0,0.0,0.0,0.0,0.0,0.37037037037037035,0.37037037037037035,3.3333333333333335,3.3333333333333335
int periods = 0;,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,3.0,1.0,0.0,1.0,0.0,1.0,0.1,-1.0,0.0,0.0,10.0,7.0,2.0,1.0,90.0,17.0,2.0,4.0,217.0,0.3333333333333333,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0
"int periods = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name()))
                periods++;
        }/*}*/",-1.0,0.0,0.0,2.0,3.0,1.0,0.0,32.0,6.0,1.0,2.0,63.0,3.0,0.3,-1.0,0.0,0.0,9.0,4.0,1.0,1.0,61.0,12.0,1.0,3.0,154.0,1.0,0.6666666666666666,1.3333333333333333,0.6666666666666666,0.5,0.0,0.3333333333333333,0.0,0.5,0.6666666666666666,-1.0,-1.0,1.0,1.0,0.3333333333333333,0.3333333333333333,0.3333333333333333,0.3333333333333333,3.0,3.0
"int periods = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name()))
                periods++;
        }/*}*/
Task[] instances = new Task[periods];",-1.0,0.0,0.0,4.0,3.0,1.0,0.0,38.0,8.0,1.0,3.0,84.0,4.0,0.4,-1.0,0.0,0.0,7.0,4.0,1.0,1.0,55.0,10.0,1.0,2.0,133.0,1.0,1.0,0.75,1.0,0.5,0.0,0.25,0.0,0.5,0.5,-1.0,-1.0,1.0,1.0,0.25,0.25,0.4444444444444444,0.4444444444444444,3.0,3.0
"int periods = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name()))
                periods++;
        }/*}*/
Task[] instances = new Task[periods];
int k = 0;",-1.0,0.0,0.0,5.0,3.0,1.0,0.0,41.0,9.0,1.0,4.0,84.0,5.0,0.5,-1.0,0.0,0.0,6.0,4.0,1.0,1.0,52.0,9.0,1.0,1.0,133.0,1.0,1.0,0.6,0.8,0.5,0.0,0.2,0.0,0.5,0.4,-1.0,-1.0,1.0,1.0,0.2,0.2,0.4444444444444444,0.4444444444444444,2.4,2.4
"int periods = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name()))
                periods++;
        }/*}*/
Task[] instances = new Task[periods];
int k = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name())) {
                instances[k] = expandedTasks[i];
                k++;
            }
        }",-1.0,0.0,0.0,6.0,6.0,2.0,1.0,81.0,17.0,2.0,5.0,175.0,9.0,0.9,-1.0,0.0,0.0,5.0,1.0,0.0,0.0,12.0,1.0,0.0,0.0,42.0,1.0,1.0,0.5555555555555556,0.5555555555555556,1.0,0.0,0.2222222222222222,0.0,1.0,0.4444444444444444,-1.0,-1.0,1.0,1.0,0.1111111111111111,0.1111111111111111,0.9259259259259259,0.9259259259259259,2.7777777777777777,2.7777777777777777
"int periods = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name()))
                periods++;
        }/*}*/
Task[] instances = new Task[periods];
int k = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name())) {
                instances[k] = expandedTasks[i];
                k++;
            }
        }
return sortTasks(instances);",-1.0,0.0,0.0,6.0,7.0,2.0,1.0,86.0,18.0,2.0,5.0,189.0,10.0,1.0,-1.0,0.0,0.0,5.0,0.0,0.0,0.0,7.0,0.0,0.0,0.0,28.0,1.0,1.0,0.5,0.5,1.0,0.0,0.2,0.0,1.0,0.1,-1.0,-1.0,1.0,1.0,0.1,0.1,1.0,1.0,2.7,2.7
"for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name()))
                periods++;
        }/*}*/",-1.0,0.0,0.0,1.0,3.0,1.0,0.0,29.0,5.0,1.0,1.0,63.0,2.0,0.2,-1.0,0.0,0.0,10.0,4.0,1.0,1.0,64.0,13.0,1.0,4.0,154.0,1.0,0.5,2.0,0.5,0.5,0.0,0.5,0.0,0.5,1.0,-1.0,-1.0,1.0,0.0,0.5,0.0,0.3333333333333333,0.3333333333333333,4.5,4.5
"for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name()))
                periods++;
        }/*}*/
Task[] instances = new Task[periods];",-1.0,0.0,0.0,3.0,3.0,1.0,0.0,35.0,7.0,1.0,2.0,84.0,3.0,0.3,-1.0,0.0,0.0,8.0,4.0,1.0,1.0,58.0,11.0,1.0,3.0,133.0,1.0,0.6666666666666666,1.3333333333333333,0.6666666666666666,0.5,0.0,0.3333333333333333,0.0,0.5,0.6666666666666666,-1.0,-1.0,1.0,1.0,0.3333333333333333,0.3333333333333333,0.4444444444444444,0.4444444444444444,4.0,4.0
"for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name()))
                periods++;
        }/*}*/
Task[] instances = new Task[periods];
int k = 0;",-1.0,0.0,0.0,4.0,3.0,1.0,0.0,38.0,8.0,1.0,3.0,84.0,4.0,0.4,-1.0,0.0,0.0,7.0,4.0,1.0,1.0,55.0,10.0,1.0,2.0,133.0,1.0,0.6666666666666666,1.0,0.5,0.5,0.0,0.25,0.0,0.5,0.5,-1.0,-1.0,1.0,1.0,0.25,0.25,0.4444444444444444,0.4444444444444444,3.0,3.0
"for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name()))
                periods++;
        }/*}*/
Task[] instances = new Task[periods];
int k = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name())) {
                instances[k] = expandedTasks[i];
                k++;
            }
        }",-1.0,0.0,0.0,5.0,6.0,2.0,1.0,78.0,16.0,2.0,4.0,175.0,8.0,0.8,-1.0,0.0,0.0,6.0,1.0,0.0,0.0,15.0,2.0,0.0,1.0,42.0,1.0,1.0,0.625,0.625,1.0,0.0,0.25,0.0,1.0,0.5,-1.0,-1.0,1.0,1.0,0.125,0.125,0.9259259259259259,0.9259259259259259,3.125,3.125
"for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name()))
                periods++;
        }/*}*/
Task[] instances = new Task[periods];
int k = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name())) {
                instances[k] = expandedTasks[i];
                k++;
            }
        }
return sortTasks(instances);",-1.0,0.0,0.0,5.0,7.0,2.0,1.0,83.0,17.0,2.0,4.0,189.0,9.0,0.9,-1.0,0.0,0.0,6.0,0.0,0.0,0.0,10.0,1.0,0.0,1.0,28.0,1.0,1.0,0.5555555555555556,0.5555555555555556,1.0,0.0,0.2222222222222222,0.0,1.0,0.1111111111111111,-1.0,-1.0,1.0,1.0,0.1111111111111111,0.1111111111111111,1.0,1.0,3.0,3.0
Task[] instances = new Task[periods];,-1.0,0.0,0.0,2.0,0.0,0.0,0.0,6.0,2.0,0.0,1.0,21.0,1.0,0.1,-1.0,0.0,0.0,9.0,7.0,2.0,1.0,87.0,16.0,2.0,4.0,196.0,0.3333333333333333,0.3333333333333333,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,1.0,1.0,0.1111111111111111,0.1111111111111111,3.0,3.0
"Task[] instances = new Task[periods];
int k = 0;",-1.0,0.0,0.0,3.0,0.0,0.0,0.0,9.0,3.0,0.0,2.0,21.0,2.0,0.2,-1.0,0.0,0.0,8.0,7.0,2.0,1.0,84.0,15.0,2.0,3.0,196.0,0.3333333333333333,0.3333333333333333,0.5,0.5,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.5,0.5,0.1111111111111111,0.1111111111111111,1.5,1.5
"Task[] instances = new Task[periods];
int k = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name())) {
                instances[k] = expandedTasks[i];
                k++;
            }
        }",-1.0,0.0,0.0,4.0,3.0,1.0,1.0,49.0,11.0,1.0,3.0,112.0,6.0,0.6,-1.0,0.0,0.0,7.0,4.0,1.0,0.0,44.0,7.0,1.0,2.0,105.0,1.0,1.0,0.8333333333333334,0.5,0.5,0.0,0.16666666666666666,0.0,0.5,0.3333333333333333,-1.0,-1.0,1.0,1.0,0.16666666666666666,0.16666666666666666,0.5925925925925926,0.5925925925925926,2.6666666666666665,2.6666666666666665
"Task[] instances = new Task[periods];
int k = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name())) {
                instances[k] = expandedTasks[i];
                k++;
            }
        }
return sortTasks(instances);",-1.0,0.0,0.0,4.0,4.0,1.0,1.0,54.0,12.0,1.0,3.0,126.0,7.0,0.7,-1.0,0.0,0.0,7.0,3.0,1.0,0.0,39.0,6.0,1.0,2.0,91.0,1.0,1.0,0.7142857142857143,0.42857142857142855,0.5,0.0,0.14285714285714285,0.0,1.0,0.14285714285714285,-1.0,-1.0,1.0,1.0,0.14285714285714285,0.14285714285714285,0.6666666666666666,0.6666666666666666,2.5714285714285716,2.5714285714285716
int k = 0;,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,3.0,1.0,0.0,1.0,0.0,1.0,0.1,-1.0,0.0,0.0,10.0,7.0,2.0,1.0,90.0,17.0,2.0,4.0,217.0,0.3333333333333333,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0
"int k = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name())) {
                instances[k] = expandedTasks[i];
                k++;
            }
        }",-1.0,0.0,0.0,2.0,3.0,1.0,1.0,43.0,9.0,1.0,2.0,91.0,5.0,0.5,-1.0,0.0,0.0,9.0,4.0,1.0,0.0,50.0,9.0,1.0,3.0,126.0,1.0,1.0,1.0,0.6,0.5,0.0,0.2,0.0,0.5,0.4,-1.0,-1.0,1.0,1.0,0.2,0.2,0.48148148148148145,0.48148148148148145,2.6,2.6
"int k = 0;
for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name())) {
                instances[k] = expandedTasks[i];
                k++;
            }
        }
return sortTasks(instances);",-1.0,0.0,0.0,2.0,4.0,1.0,1.0,48.0,10.0,1.0,2.0,105.0,6.0,0.6,-1.0,0.0,0.0,9.0,3.0,1.0,0.0,45.0,8.0,1.0,3.0,112.0,1.0,1.0,0.8333333333333334,0.5,0.5,0.0,0.16666666666666666,0.0,1.0,0.16666666666666666,-1.0,-1.0,1.0,1.0,0.16666666666666666,0.16666666666666666,0.5555555555555556,0.5555555555555556,2.5,2.5
"for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name())) {
                instances[k] = expandedTasks[i];
                k++;
            }
        }",-1.0,0.0,0.0,1.0,3.0,1.0,1.0,40.0,8.0,1.0,1.0,91.0,4.0,0.4,-1.0,0.0,0.0,10.0,4.0,1.0,0.0,53.0,10.0,1.0,4.0,126.0,1.0,0.6666666666666666,1.25,0.5,0.5,0.0,0.25,0.0,0.5,0.5,-1.0,-1.0,1.0,0.0,0.25,0.0,0.48148148148148145,0.48148148148148145,3.25,3.25
"for (int i = 0; i < expandedTasks.length; i++) {
            if (expandedTasks[i].name().equals(t.name())) {
                instances[k] = expandedTasks[i];
                k++;
            }
        }
return sortTasks(instances);",-1.0,0.0,0.0,1.0,4.0,1.0,1.0,45.0,9.0,1.0,1.0,105.0,5.0,0.5,-1.0,0.0,0.0,10.0,3.0,1.0,0.0,48.0,9.0,1.0,4.0,112.0,1.0,0.6666666666666666,1.0,0.4,0.5,0.0,0.2,0.0,1.0,0.2,-1.0,-1.0,1.0,0.0,0.2,0.0,0.5555555555555556,0.5555555555555556,3.0,3.0
return sortTasks(instances);,-1.0,0.0,0.0,0.0,1.0,0.0,0.0,5.0,1.0,0.0,0.0,14.0,1.0,0.1,-1.0,0.0,0.0,11.0,6.0,2.0,1.0,88.0,17.0,2.0,5.0,203.0,0.3333333333333333,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.07407407407407407,0.07407407407407407,2.0,2.0
ord[i] = false;,-1.0,0.0,0.0,0.0,0.0,0.0,1.0,7.0,2.0,0.0,0.0,14.0,1.0,0.06666666666666667,-1.0,0.0,0.0,12.0,5.0,1.0,4.0,135.0,29.0,5.0,6.0,273.0,0.25,0.16666666666666666,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.05263157894736842,0.05263157894736842,2.0,2.0
min = i;,-1.0,0.0,0.0,0.0,0.0,0.0,1.0,5.0,2.0,0.0,0.0,14.0,1.0,0.06666666666666667,-1.0,0.0,0.0,12.0,5.0,1.0,4.0,137.0,29.0,5.0,6.0,273.0,0.14285714285714285,0.14285714285714285,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.05263157894736842,0.05263157894736842,2.0,2.0
"if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }",-1.0,0.0,0.0,0.0,5.0,0.0,1.0,49.0,9.0,0.0,0.0,105.0,2.0,0.13333333333333333,-1.0,0.0,0.0,12.0,0.0,1.0,4.0,93.0,22.0,5.0,6.0,182.0,0.5714285714285714,0.42857142857142855,2.0,1.5,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.39473684210526316,0.39473684210526316,7.5,7.5
min = Integer.MAX_VALUE;,-1.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0,1.0,0.0,0.0,7.0,1.0,0.06666666666666667,-1.0,0.0,0.0,12.0,5.0,1.0,4.0,139.0,30.0,5.0,6.0,280.0,0.14285714285714285,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.02631578947368421,0.02631578947368421,1.0,1.0
"min = Integer.MAX_VALUE;
for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/",-1.0,0.0,0.0,1.0,5.0,1.0,2.0,65.0,13.0,1.0,1.0,133.0,4.0,0.26666666666666666,-1.0,0.0,0.0,11.0,0.0,0.0,3.0,77.0,18.0,4.0,5.0,154.0,1.0,0.5714285714285714,1.75,1.0,0.2,0.0,0.25,0.0,1.0,0.5,-1.0,-1.0,1.0,0.0,0.25,0.0,0.5,0.5,4.75,4.75
"min = Integer.MAX_VALUE;
for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
ord[min] = true;",-1.0,0.0,0.0,1.0,5.0,1.0,3.0,72.0,15.0,1.0,1.0,147.0,5.0,0.3333333333333333,-1.0,0.0,0.0,11.0,0.0,0.0,2.0,70.0,16.0,4.0,5.0,140.0,1.0,0.7142857142857143,1.4,1.0,0.2,0.0,0.2,0.0,1.0,0.4,-1.0,-1.0,1.0,0.0,0.2,0.0,0.5526315789473685,0.5526315789473685,4.2,4.2
"min = Integer.MAX_VALUE;
for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
ord[min] = true;
sorted[num] = tasks[min];",-1.0,0.0,0.0,1.0,5.0,1.0,4.0,83.0,18.0,1.0,1.0,175.0,6.0,0.4,-1.0,0.0,0.0,11.0,0.0,0.0,1.0,59.0,13.0,4.0,5.0,112.0,1.0,0.8571428571428571,1.1666666666666667,1.0,0.2,0.0,0.16666666666666666,0.0,1.0,0.3333333333333333,-1.0,-1.0,1.0,0.0,0.16666666666666666,0.0,0.6578947368421053,0.6578947368421053,4.166666666666667,4.166666666666667
"min = Integer.MAX_VALUE;
for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
ord[min] = true;
sorted[num] = tasks[min];
num++;",-1.0,0.0,0.0,1.0,5.0,1.0,4.0,86.0,19.0,1.0,1.0,182.0,7.0,0.4666666666666667,-1.0,0.0,0.0,11.0,0.0,0.0,1.0,56.0,12.0,4.0,5.0,105.0,1.0,0.8571428571428571,1.0,0.8571428571428571,0.2,0.0,0.14285714285714285,0.0,1.0,0.2857142857142857,-1.0,-1.0,1.0,0.0,0.14285714285714285,0.0,0.6842105263157895,0.6842105263157895,3.7142857142857144,3.7142857142857144
"for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/",-1.0,0.0,0.0,1.0,5.0,1.0,1.0,62.0,12.0,1.0,1.0,126.0,3.0,0.2,-1.0,0.0,0.0,11.0,0.0,0.0,4.0,80.0,19.0,4.0,5.0,161.0,1.0,0.42857142857142855,2.3333333333333335,1.0,0.2,0.0,0.3333333333333333,0.0,1.0,0.6666666666666666,-1.0,-1.0,1.0,0.0,0.3333333333333333,0.0,0.47368421052631576,0.47368421052631576,6.0,6.0
"for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
ord[min] = true;",-1.0,0.0,0.0,1.0,5.0,1.0,2.0,69.0,14.0,1.0,1.0,140.0,4.0,0.26666666666666666,-1.0,0.0,0.0,11.0,0.0,0.0,3.0,73.0,17.0,4.0,5.0,147.0,1.0,0.5714285714285714,1.75,1.0,0.2,0.0,0.25,0.0,1.0,0.5,-1.0,-1.0,1.0,0.0,0.25,0.0,0.5263157894736842,0.5263157894736842,5.0,5.0
"for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
ord[min] = true;
sorted[num] = tasks[min];",-1.0,0.0,0.0,1.0,5.0,1.0,3.0,80.0,17.0,1.0,1.0,168.0,5.0,0.3333333333333333,-1.0,0.0,0.0,11.0,0.0,0.0,2.0,62.0,14.0,4.0,5.0,119.0,1.0,0.7142857142857143,1.4,1.0,0.2,0.0,0.2,0.0,1.0,0.4,-1.0,-1.0,1.0,0.0,0.2,0.0,0.631578947368421,0.631578947368421,4.8,4.8
"for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
ord[min] = true;
sorted[num] = tasks[min];
num++;",-1.0,0.0,0.0,1.0,5.0,1.0,3.0,83.0,18.0,1.0,1.0,175.0,6.0,0.4,-1.0,0.0,0.0,11.0,0.0,0.0,2.0,59.0,13.0,4.0,5.0,112.0,1.0,0.7142857142857143,1.1666666666666667,0.8333333333333334,0.2,0.0,0.16666666666666666,0.0,1.0,0.3333333333333333,-1.0,-1.0,1.0,0.0,0.16666666666666666,0.0,0.6578947368421053,0.6578947368421053,4.166666666666667,4.166666666666667
ord[min] = true;,-1.0,0.0,0.0,0.0,0.0,0.0,1.0,7.0,2.0,0.0,0.0,14.0,1.0,0.06666666666666667,-1.0,0.0,0.0,12.0,5.0,1.0,4.0,135.0,29.0,5.0,6.0,273.0,0.16666666666666666,0.14285714285714285,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.05263157894736842,0.05263157894736842,2.0,2.0
"ord[min] = true;
sorted[num] = tasks[min];",-1.0,0.0,0.0,0.0,0.0,0.0,2.0,18.0,5.0,0.0,0.0,42.0,2.0,0.13333333333333333,-1.0,0.0,0.0,12.0,5.0,1.0,3.0,124.0,26.0,5.0,6.0,245.0,0.3333333333333333,0.2857142857142857,0.5,1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.15789473684210525,0.15789473684210525,3.0,3.0
"ord[min] = true;
sorted[num] = tasks[min];
num++;",-1.0,0.0,0.0,0.0,0.0,0.0,2.0,21.0,6.0,0.0,0.0,49.0,3.0,0.2,-1.0,0.0,0.0,12.0,5.0,1.0,3.0,121.0,25.0,5.0,6.0,238.0,0.5,0.3333333333333333,0.6666666666666666,0.3333333333333333,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.18421052631578946,0.18421052631578946,2.3333333333333335,2.3333333333333335
sorted[num] = tasks[min];,-1.0,0.0,0.0,0.0,0.0,0.0,1.0,11.0,3.0,0.0,0.0,28.0,1.0,0.06666666666666667,-1.0,0.0,0.0,12.0,5.0,1.0,4.0,131.0,28.0,5.0,6.0,259.0,0.3333333333333333,0.25,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.10526315789473684,0.10526315789473684,4.0,4.0
"sorted[num] = tasks[min];
num++;",-1.0,0.0,0.0,0.0,0.0,0.0,1.0,14.0,4.0,0.0,0.0,35.0,2.0,0.13333333333333333,-1.0,0.0,0.0,12.0,5.0,1.0,4.0,128.0,27.0,5.0,6.0,252.0,0.5,0.3333333333333333,1.0,0.5,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.13157894736842105,0.13157894736842105,2.5,2.5
num++;,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,3.0,1.0,0.0,0.0,7.0,1.0,0.06666666666666667,-1.0,0.0,0.0,12.0,5.0,1.0,5.0,139.0,30.0,5.0,6.0,280.0,0.25,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.02631578947368421,0.02631578947368421,1.0,1.0
Task[] sorted = new Task[tasks.length];,-1.0,0.0,0.0,2.0,0.0,0.0,0.0,8.0,1.0,1.0,1.0,21.0,1.0,0.06666666666666667,-1.0,0.0,0.0,10.0,5.0,1.0,5.0,134.0,30.0,4.0,5.0,266.0,0.3333333333333333,0.2,1.0,1.0,0.2,0.0,1.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,1.0,1.0,0.07894736842105263,0.07894736842105263,3.0,3.0
"Task[] sorted = new Task[tasks.length];
boolean[] ord = new boolean[tasks.length];",-1.0,0.0,0.0,4.0,0.0,0.0,0.0,16.0,2.0,2.0,2.0,28.0,2.0,0.13333333333333333,-1.0,0.0,0.0,8.0,5.0,1.0,5.0,126.0,29.0,3.0,4.0,259.0,0.4,0.3333333333333333,1.0,0.5,0.4,0.0,1.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.5,0.5,0.10526315789473684,0.10526315789473684,2.0,2.0
"Task[] sorted = new Task[tasks.length];
boolean[] ord = new boolean[tasks.length];
int num = 0;",-1.0,0.0,0.0,5.0,0.0,0.0,0.0,19.0,3.0,2.0,3.0,28.0,3.0,0.2,-1.0,0.0,0.0,7.0,5.0,1.0,5.0,123.0,28.0,3.0,3.0,259.0,0.4,0.3333333333333333,0.6666666666666666,0.3333333333333333,0.4,0.0,0.6666666666666666,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.3333333333333333,0.3333333333333333,0.10526315789473684,0.10526315789473684,1.3333333333333333,1.3333333333333333
"Task[] sorted = new Task[tasks.length];
boolean[] ord = new boolean[tasks.length];
int num = 0;
int min = 0;",-1.0,0.0,0.0,6.0,0.0,0.0,0.0,22.0,4.0,2.0,4.0,28.0,4.0,0.26666666666666666,-1.0,0.0,0.0,6.0,5.0,1.0,5.0,120.0,27.0,3.0,2.0,259.0,0.4,0.3333333333333333,0.5,0.25,0.4,0.0,0.5,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.25,0.25,0.10526315789473684,0.10526315789473684,1.0,1.0
"Task[] sorted = new Task[tasks.length];
boolean[] ord = new boolean[tasks.length];
int num = 0;
int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }",-1.0,0.0,0.0,7.0,0.0,0.0,1.0,42.0,10.0,3.0,5.0,63.0,6.0,0.4,-1.0,0.0,0.0,5.0,5.0,1.0,4.0,100.0,21.0,2.0,1.0,224.0,1.0,0.6,0.6666666666666666,0.5,0.6,0.0,0.5,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.16666666666666666,0.16666666666666666,0.23684210526315788,0.23684210526315788,1.5,1.5
"Task[] sorted = new Task[tasks.length];
boolean[] ord = new boolean[tasks.length];
int num = 0;
int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }
while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }",-1.0,0.0,0.0,8.0,5.0,1.0,5.0,135.0,30.0,5.0,6.0,259.0,14.0,0.9333333333333333,-1.0,0.0,0.0,4.0,0.0,0.0,0.0,7.0,1.0,0.0,0.0,28.0,1.0,1.0,0.5,0.5,1.0,0.0,0.35714285714285715,0.0,1.0,0.14285714285714285,-1.0,-1.0,1.0,1.0,0.07142857142857142,0.07142857142857142,0.9736842105263158,0.9736842105263158,2.642857142857143,2.642857142857143
"Task[] sorted = new Task[tasks.length];
boolean[] ord = new boolean[tasks.length];
int num = 0;
int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }
while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }
return sorted;",-1.0,0.0,0.0,8.0,5.0,1.0,5.0,137.0,31.0,5.0,6.0,266.0,15.0,1.0,-1.0,0.0,0.0,4.0,0.0,0.0,0.0,5.0,0.0,0.0,0.0,21.0,1.0,1.0,0.2,0.4666666666666667,1.0,0.0,0.3333333333333333,0.0,1.0,0.13333333333333333,-1.0,-1.0,1.0,1.0,0.06666666666666667,0.06666666666666667,1.0,1.0,2.533333333333333,2.533333333333333
boolean[] ord = new boolean[tasks.length];,-1.0,0.0,0.0,2.0,0.0,0.0,0.0,8.0,1.0,1.0,1.0,7.0,1.0,0.06666666666666667,-1.0,0.0,0.0,10.0,5.0,1.0,5.0,134.0,30.0,4.0,5.0,280.0,0.2,0.16666666666666666,1.0,1.0,0.2,0.0,1.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,1.0,1.0,0.02631578947368421,0.02631578947368421,1.0,1.0
"boolean[] ord = new boolean[tasks.length];
int num = 0;",-1.0,0.0,0.0,3.0,0.0,0.0,0.0,11.0,2.0,1.0,2.0,7.0,2.0,0.13333333333333333,-1.0,0.0,0.0,9.0,5.0,1.0,5.0,131.0,29.0,4.0,4.0,280.0,0.25,0.2,0.5,0.5,0.2,0.0,0.5,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.5,0.5,0.02631578947368421,0.02631578947368421,0.5,0.5
"boolean[] ord = new boolean[tasks.length];
int num = 0;
int min = 0;",-1.0,0.0,0.0,4.0,0.0,0.0,0.0,14.0,3.0,1.0,3.0,7.0,3.0,0.2,-1.0,0.0,0.0,8.0,5.0,1.0,5.0,128.0,28.0,4.0,3.0,280.0,0.25,0.2,0.3333333333333333,0.3333333333333333,0.2,0.0,0.3333333333333333,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.3333333333333333,0.3333333333333333,0.02631578947368421,0.02631578947368421,0.3333333333333333,0.3333333333333333
"boolean[] ord = new boolean[tasks.length];
int num = 0;
int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }",-1.0,0.0,0.0,5.0,0.0,0.0,1.0,34.0,9.0,2.0,4.0,42.0,5.0,0.3333333333333333,-1.0,0.0,0.0,7.0,5.0,1.0,4.0,108.0,22.0,3.0,2.0,245.0,1.0,0.5,0.8,0.6,0.4,0.0,0.4,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.2,0.2,0.15789473684210525,0.15789473684210525,1.2,1.2
"boolean[] ord = new boolean[tasks.length];
int num = 0;
int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }
while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }",-1.0,0.0,0.0,6.0,5.0,1.0,5.0,127.0,29.0,4.0,5.0,238.0,13.0,0.8666666666666667,-1.0,0.0,0.0,6.0,0.0,0.0,0.0,15.0,2.0,1.0,1.0,49.0,1.0,1.0,0.5384615384615384,0.3076923076923077,0.8,0.0,0.3076923076923077,0.0,1.0,0.15384615384615385,-1.0,-1.0,1.0,1.0,0.07692307692307693,0.07692307692307693,0.8947368421052632,0.8947368421052632,2.6153846153846154,2.6153846153846154
"boolean[] ord = new boolean[tasks.length];
int num = 0;
int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }
while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }
return sorted;",-1.0,0.0,0.0,6.0,5.0,1.0,5.0,129.0,30.0,4.0,5.0,245.0,14.0,0.9333333333333333,-1.0,0.0,0.0,6.0,0.0,0.0,0.0,13.0,1.0,1.0,1.0,42.0,1.0,1.0,0.5,0.2857142857142857,0.8,0.0,0.2857142857142857,0.0,1.0,0.14285714285714285,-1.0,-1.0,1.0,1.0,0.07142857142857142,0.07142857142857142,0.9210526315789473,0.9210526315789473,2.5,2.5
int num = 0;,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,3.0,1.0,0.0,1.0,0.0,1.0,0.06666666666666667,-1.0,0.0,0.0,11.0,5.0,1.0,5.0,139.0,30.0,5.0,5.0,287.0,0.25,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0
"int num = 0;
int min = 0;",-1.0,0.0,0.0,2.0,0.0,0.0,0.0,6.0,2.0,0.0,2.0,0.0,2.0,0.13333333333333333,-1.0,0.0,0.0,10.0,5.0,1.0,5.0,136.0,29.0,5.0,4.0,287.0,0.25,0.14285714285714285,0.5,0.5,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.5,0.5,0.0,0.0,0.0,0.0
"int num = 0;
int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }",-1.0,0.0,0.0,3.0,0.0,0.0,1.0,26.0,8.0,1.0,3.0,35.0,4.0,0.26666666666666666,-1.0,0.0,0.0,9.0,5.0,1.0,4.0,116.0,23.0,4.0,3.0,252.0,1.0,0.3333333333333333,1.0,0.5,0.2,0.0,0.25,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.25,0.25,0.13157894736842105,0.13157894736842105,1.25,1.25
"int num = 0;
int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }
while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }",-1.0,0.0,0.0,4.0,5.0,1.0,5.0,119.0,28.0,3.0,4.0,231.0,12.0,0.8,-1.0,0.0,0.0,8.0,0.0,0.0,0.0,23.0,3.0,2.0,2.0,56.0,1.0,1.0,0.5833333333333334,0.3333333333333333,0.6,0.0,0.25,0.0,1.0,0.16666666666666666,-1.0,-1.0,1.0,1.0,0.08333333333333333,0.08333333333333333,0.868421052631579,0.868421052631579,2.75,2.75
"int num = 0;
int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }
while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }
return sorted;",-1.0,0.0,0.0,4.0,5.0,1.0,5.0,121.0,29.0,3.0,4.0,238.0,13.0,0.8666666666666667,-1.0,0.0,0.0,8.0,0.0,0.0,0.0,21.0,2.0,2.0,2.0,49.0,1.0,1.0,0.5384615384615384,0.3076923076923077,0.6,0.0,0.23076923076923078,0.0,1.0,0.15384615384615385,-1.0,-1.0,1.0,1.0,0.07692307692307693,0.07692307692307693,0.8947368421052632,0.8947368421052632,2.6153846153846154,2.6153846153846154
int min = 0;,-1.0,0.0,0.0,1.0,0.0,0.0,0.0,3.0,1.0,0.0,1.0,0.0,1.0,0.06666666666666667,-1.0,0.0,0.0,11.0,5.0,1.0,5.0,139.0,30.0,5.0,5.0,287.0,0.14285714285714285,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0
"int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }",-1.0,0.0,0.0,2.0,0.0,0.0,1.0,23.0,7.0,1.0,2.0,35.0,3.0,0.2,-1.0,0.0,0.0,10.0,5.0,1.0,4.0,119.0,24.0,4.0,4.0,252.0,1.0,0.3333333333333333,1.3333333333333333,0.6666666666666666,0.2,0.0,0.3333333333333333,0.0,0.0,0.0,-1.0,-1.0,1.0,1.0,0.3333333333333333,0.3333333333333333,0.13157894736842105,0.13157894736842105,1.6666666666666667,1.6666666666666667
"int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }
while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }",-1.0,0.0,0.0,3.0,5.0,1.0,5.0,116.0,27.0,3.0,3.0,231.0,11.0,0.7333333333333333,-1.0,0.0,0.0,9.0,0.0,0.0,0.0,26.0,4.0,2.0,3.0,56.0,1.0,1.0,0.6363636363636364,0.6363636363636364,0.6,0.0,0.2727272727272727,0.0,1.0,0.18181818181818182,-1.0,-1.0,1.0,1.0,0.09090909090909091,0.09090909090909091,0.868421052631579,0.868421052631579,3.0,3.0
"int min = 0;
for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }
while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }
return sorted;",-1.0,0.0,0.0,3.0,5.0,1.0,5.0,118.0,28.0,3.0,3.0,238.0,12.0,0.8,-1.0,0.0,0.0,9.0,0.0,0.0,0.0,24.0,3.0,2.0,3.0,49.0,1.0,1.0,0.5833333333333334,0.5833333333333334,0.6,0.0,0.25,0.0,1.0,0.16666666666666666,-1.0,-1.0,1.0,1.0,0.08333333333333333,0.08333333333333333,0.8947368421052632,0.8947368421052632,2.8333333333333335,2.8333333333333335
"for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }",-1.0,0.0,0.0,1.0,0.0,0.0,1.0,20.0,6.0,1.0,1.0,35.0,2.0,0.13333333333333333,-1.0,0.0,0.0,11.0,5.0,1.0,4.0,122.0,25.0,4.0,5.0,252.0,1.0,0.3333333333333333,2.0,1.0,0.2,0.0,0.5,0.0,0.0,0.0,-1.0,-1.0,1.0,0.0,0.5,0.0,0.13157894736842105,0.13157894736842105,2.5,2.5
"for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }
while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }",-1.0,0.0,0.0,2.0,5.0,1.0,5.0,113.0,26.0,3.0,2.0,231.0,10.0,0.6666666666666666,-1.0,0.0,0.0,10.0,0.0,0.0,0.0,29.0,5.0,2.0,4.0,56.0,1.0,1.0,0.7,0.4,0.6,0.0,0.3,0.0,1.0,0.2,-1.0,-1.0,1.0,1.0,0.1,0.1,0.868421052631579,0.868421052631579,3.3,3.3
"for (int i = 0; i < ord.length; i++) {
            ord[i] = false;
        }
while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }
return sorted;",-1.0,0.0,0.0,2.0,5.0,1.0,5.0,115.0,27.0,3.0,2.0,238.0,11.0,0.7333333333333333,-1.0,0.0,0.0,10.0,0.0,0.0,0.0,27.0,4.0,2.0,4.0,49.0,1.0,1.0,0.6363636363636364,0.36363636363636365,0.6,0.0,0.2727272727272727,0.0,1.0,0.18181818181818182,-1.0,-1.0,1.0,1.0,0.09090909090909091,0.09090909090909091,0.8947368421052632,0.8947368421052632,3.090909090909091,3.090909090909091
"while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }",-1.0,0.0,0.0,1.0,5.0,1.0,4.0,93.0,20.0,2.0,1.0,196.0,8.0,0.5333333333333333,-1.0,0.0,0.0,11.0,0.0,0.0,1.0,49.0,11.0,3.0,5.0,91.0,1.0,0.8571428571428571,0.875,0.75,0.4,0.0,0.25,0.0,1.0,0.25,-1.0,-1.0,1.0,0.0,0.125,0.0,0.7368421052631579,0.7368421052631579,3.5,3.5
"while (num < tasks.length) {
            /*{*/min = Integer.MAX_VALUE;
            for (int i = 0; i < tasks.length; i++) {
                if ((!ord[i] && min == Integer.MAX_VALUE) ||
                    (!ord[i] &&
                     tasks[i].domain().releaseDate().compareTo(tasks[min].domain().
                        releaseDate()) < 0)) {
                    min = i;
                }
            }/*}*/
            ord[min] = true;
            sorted[num] = tasks[min];
            num++;
        }
return sorted;",-1.0,0.0,0.0,1.0,5.0,1.0,4.0,95.0,21.0,2.0,1.0,203.0,9.0,0.6,-1.0,0.0,0.0,11.0,0.0,0.0,1.0,47.0,10.0,3.0,5.0,84.0,1.0,0.8571428571428571,0.7777777777777778,0.6666666666666666,0.4,0.0,0.2222222222222222,0.0,1.0,0.2222222222222222,-1.0,-1.0,1.0,0.0,0.1111111111111111,0.0,0.7631578947368421,0.7631578947368421,3.2222222222222223,3.2222222222222223
return sorted;,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,1.0,0.0,0.0,7.0,1.0,0.06666666666666667,-1.0,0.0,0.0,12.0,5.0,1.0,5.0,140.0,30.0,5.0,6.0,280.0,0.3333333333333333,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.02631578947368421,0.02631578947368421,1.0,1.0
